//  cs5 changes -> http://forums.adobe.com/thread/615381////     btMain.jsx////////   Copyright 2013-2017 North Atlantic Publishing Systems, Inc.//   All Rights Reserved//     www.napsys.com//// version//   1.0.0 -- pjb begin//   0.6.1  -- new BalfourTools project > 11/5//                edit before & after save processes//	nb before build - comment out all $.writelns  - remove $.bp 's////   0.7.19 - remove page check at startup//   0.7.21 - BT-284, BT-211 and BT-287: make page array paths - createArrayOfPageFilePaths() - later, not at init/login time////#target "indesign"//// include other files// £//      var bt={};                            // set up bt namespace to group our functions for debug      bt.version='5.1.8 RC2';        // set internal library version here      bt.testingScript = function () {        alert('BalfrourTools ' + bt.version )      }//var asInterface = {};//-----------------------------------------------------------------------------//    n.b.,  so we can call routines from btBook.jsx here and visa versa//          uncomment includes for extend script debugging  & unit testing - but comment out for FB build/*#include './btThumbnails.jsx';#include './libraries/json2.js';#include './btBook.jsx';#include './btPageFlows.jsx';#include './btFrames.jsx';#include './btPortraitManager.jsx';#include './activityLog.jsx';#include "./portraitUtilities.jsx";#include "./portraitFiles.jsx";#include "./btIndexer.jsx";#include "./indexUtilities.jsx"#include "./IndexPreferences.jsx";#include "./btShipping.jsx";#include "./btEncodeDecode.jsx";#include "./btUtils.jsx";#include "./btEvents.jsx";#include "./btXMP.jsx";#include "./btCaptionTags.jsx";#include "./btTagSelection.jsx";#include "./btByline.jsx";#include "./btCMfoundation.jsx";*///-----------------------------------------------------------------------------if (typeof String.prototype.endsWith !== 'function') {    String.prototype.endsWith = function(suffix) {        return this.indexOf(suffix, this.length - suffix.length) !== -1;    };}Date.prototype.format = function(format){      var o = {        "M+" : this.getMonth()+1, //month        "d+" : this.getDate(),    //day        "h+" : this.getHours(),   //hour        "m+" : this.getMinutes(), //minute        "s+" : this.getSeconds(), //second        "q+" : Math.floor((this.getMonth()+3)/3),  //quarter        "S" : this.getMilliseconds() //millisecond      }    if(/(y+)/.test(format)) format=format.replace(RegExp.$1,(this.getFullYear()+"").substr(4 - RegExp.$1.length));    for(var k in o)if(new RegExp("("+ k +")").test(format))    format = format.replace(RegExp.$1,    RegExp.$1.length==1 ? o[k] :    ("00"+ o[k]).substr((""+ o[k]).length));    return format;}Array.prototype.find = function (what) {    var rtn=false;    for (var n=0;n<this.length;n++) {        if (what==this[n]) return true;    }    return rtn;}var BT_DATA_FOLDER_NAME     = "BalfourToolsData";var BT_ARRAY_DELIMITER      =  "~";var BT_MULTIPLEVALUES       =  "Multiple Values";var BT_LAST_USER                = "BT_Last_User";    // doc metadatavar BT_JOURNAL_FILE           = "BT_Journal.xml";   // file namevar BT_CHATTER_FILE           = "BT_Chatter.xml";   // file namevar BT_SHIPPINGLOG_FILE           = "BT_ShippingLog.xml";   // file namevar BT_PAGETHUMBNAILSPATH                = "BT_PAGETHUMBNAILSPATH"; // app labelvar BT_USERNAME                                   = "BT_USERNAME";   // app labelvar BT_USERROLE                                    = "BT_USERROLE";   // app label//var BT_pdfExportPresetName                  = "Balfour_PDF_exportstyle";   //"[PDF/X-3:2002]";var BT_DEFAULTBANNER                          = "BalfourTOOLS_Banner.jpg"; //"BalfourTOOLS_Banner_BETA.png";// new color space pre-sets for 3.2var BT_COLORSPACE_FILENAME                 = "Balfour_Standard.csf";var BT_WINDOWSCOLORSPACE_FILENAME   = "Balfour_Standard_Windows.csf";// new pdf export pre-sets for 3.2var BT_PDF_PRESET_FILENAME                  =  "Balfour_PDF_2015.joboptions";var BT_PDF_PRESET_NAME                        =  "Balfour_PDF_2015";bt.iamCEF = false;bt.waitingForBridge = [];function asInit(wrapper) {  asInterface = wrapper;}function makeInt (numString) {    var res =0;    try {        res = parseInt(numString.toString(),10);    } catch (e) {        bt.wr ("makeInt exception: "+e);    }    if (res==NaN) {        bt.wr ("makeInt NaN: "+numString);        res=0;    }   return res;}bt.initLibrary = function () {            var rtn=true;            var tmp=null;            bt.restartWarn=false;               // class data            bt.valid=true;  // start T            bt.debug=false;            bt.os=Folder.fs;            bt.loginUserName="";            bt.galleryIndex="";  // used for CM gallery searches            bt.dontScale = false;             // list all startup script names here - for delivery & verify            // bt.startupScriptNames=["BT_beforeSave.jsx","BT_afterSave.jsx","BT_afterOpen.jsx","BT_afterActivate.jsx","BT_beforeQuit.jsx"];  1/29/16 pjb            //bt.startupScriptNames=["BT_beforeSave.jsx","BT_afterSave.jsx","BT_afterOpen.jsx","BT_beforeQuit.jsx"];            bt.pathArraysInited=false;            // set uo to relink dragged images later            bt.savedDrop="";            bt.pendLinks=[];            bt.suppressAutoIndex = false;            bt.suppressExternalDrops = false;            bt.suppressPageChecks=false;            // use app data for local data - from ver 3.1.2            // n.b. - bt.localDataFolderPath is used Local client preferences & log file writer            //     !!     No log file writes (bt.wr() et al) tlll this path is setup!  (i.e., anywhere above this section)            if ( Folder.fs.indexOf("Windows")>=0) {                 bt.localDataFolderPath = Folder.appData.fsName+"\\Adobe\\"+BT_DATA_FOLDER_NAME+"\\";                 bt.localAdobeDataFolderPath = Folder.appData.fsName+"\\Adobe\\";            } else {                 bt.localDataFolderPath = Folder.appData.fsName+"/Adobe/"+BT_DATA_FOLDER_NAME+"/";                 bt.localAdobeDataFolderPath = Folder.appData.fsName+"/Adobe/";            }            bt.prefFilePath =bt.localDataFolderPath+"BT_Prefs.xml";            if (Folder(bt.localDataFolderPath).exists ==false) {                bt.makeFolder(bt.localDataFolderPath);            }            if (Folder(bt.localDataFolderPath).exists ==false) {                bt.doAlert ("Failed to find or create local storage folder: "+bt.localDataFolderPath);                return false;   // total failure ->   ABORT LAUNCH            }            bt.startBridge();   // pjb 3-2-17 move earlier to keep in background            //----------------------------------------------------------------------------------------------            // handle one-time move of prefs file from old prefs folder                var oldLocalDataFolderPath = bt.ensurePathEndsInSlash(Folder.myDocuments.fsName.toString());                var oldPrefsFileObj = new File(oldLocalDataFolderPath+"BT_Prefs.xml");                // is there a prefs file in documents folder and not yet one in BT_DATA_FOLDER_NAME folder?                // if so, move the prefs file to the new location                if (oldPrefsFileObj.exists == true && new File(bt.prefFilePath).exists == false) {                        var tmpResult=false;                        bt.wr(" Moving BT_Prefs.xml to new location ");                        tmpResult = bt.copyFile(oldPrefsFileObj.fsName, bt.prefFilePath);                        bt.wr("   Old pref file copied = "+tmpResult);                        tmpResult = oldPrefsFileObj.rename("old_BT_Prefs.xml");                        bt.wr("   Old pref file renamed = "+tmpResult);                        tmpResult = oldPrefsFileObj.remove();                        bt.wr("   Old pref file removed = "+tmpResult);                        bt.wr("   Old pref file exists = "+oldPrefsFileObj.exists);                        bt.wr("   New pref file exists = "+new File(bt.prefFilePath).exists);                        // and rename old log file to avaoid confusion                        var oldLogFileObj = new File(oldLocalDataFolderPath+"BT_LogFile.txt");                        tmpResult = oldLogFileObj.rename("old_BT_LogFile.txt")                        bt.wr("   Old log file renamed = "+tmpResult);              }            //  end - handle move of prefs file from old prefs folder           //----------------------------------------------------------------------------------------------            bt.prefData = bt.readFileIntoXML(bt.prefFilePath,"Preferences");            // if prefs file does not exist - get defaults and make one            if (bt.prefData==null) {               bt.prefData=bt.getDefaultPrefs();               bt.writeXMLToFile (bt.prefFilePath,"Preferences",bt.prefData,null);               rtn=true;            }            bt.wr("BT Initialization begins.");            bt.wr("Local prefs and logs are stored in: "+bt.localDataFolderPath);            // update Pref data to include manufacturing interface option            if (bt.prefData.mfgInterface==undefined) {                bt.prefData.appendChild(<mfgInterface>0</mfgInterface>);   // no longer used                bt.writeXMLToFile (bt.prefFilePath,"Preferences",bt.prefData,null);            }          // now make sure our designated project folder is accessible and valid            var prjPath = new Folder(bt.getProjectFolderPath());            if (prjPath.exists==false || bt.isThisAValidProjectFolder(bt.getProjectFolderPath(),false)==false ) {                var validFolder=false;                var retry =0;                do {                    retry++;                    validFolder=bt.selectAFolder("Please Select Project Folder","PROJECT");                } while (validFolder==false && retry<2);               if (validFolder==false) {                    bt.doAlert ("Invalid project folder!\r"+prjPath.fsName+"\r Cannot start BalfourTools");                   return false;   // total failure ->   ABORT LAUNCH                }                bt.writeXMLToFile (bt.prefFilePath,"Preferences",bt.prefData,null);                prjPath = new Folder(bt.getProjectFolderPath());                if (prjPath.exists) rtn=true;                else {                    // total failure ->   ABORT LAUNCH                    bt.doAlert ("Failed to access project folder!\r"+prjPath.fsName+"\r Cannot start BalfourTools");                    return false ;                }            }           if (bt.prefData.btMyContentFolder == undefined || bt.prefData.btMyContentFolder=="" || (new File(bt.prefData.btMyContentFolder)).exists==false ) {               if(bt.selectAFolder("Please Select Content Folder","CONTENT")==false) {                   if(bt.selectAFolder("Please Select Content Folder","CONTENT")==false) {                       bt.doAlert ("Content folder not set\r"+bt.prefData.btMyContentFolder+"\r Cannot start BalfourTools");                         return false;                   }               }           }            if(bt.prefData.machineName == undefined || bt.prefData.machineName == "") {                bt.prefData.machineName = bt.prompt("Machine name:","","Name this machine");                if(bt.prefData.machineName == undefined && bt.prefData.machineName = "") {                    bt.prefData.machineName = bt.prompt("Machine name:","","Please name this machine");                }                  if(bt.prefData.machineName == undefined && bt.prefData.machineName = "") {                          bt.doAlert ("Machine name not set\r"+bt.prefData.machineName+"\r Cannot start BalfourTools");                          return false;                   } else {                           bt.writeXMLToFile (bt.prefFilePath,"Preferences",bt.prefData,null);                    }             }             // now that the project folder is set...            bt.settingsFolderPath =  bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"Settings");            bt.settingsFolderPath =  bt.ensurePathEndsInSlash(bt.settingsFolderPath);            bt.userdataFolderPath =  bt.addAnotherFolderToPath(bt.settingsFolderPath,"UserData");            bt.userdataFolderPath =  bt.ensurePathEndsInSlash(bt.userdataFolderPath);            //bt.localResourcePath = Folder.myDocuments.fsName.toString();  //+"/Balfour/";            // init balfour metadata stuff            bt.xmpBalfourURL    = "http://www.balfour.com/blfrxmp/";            bt.xmpBalfourName = "BalfourToolsXMP";            bt.projectPagesPath = bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"Pages"); // start using this var            bt.projectPagesPath = bt.ensurePathEndsInSlash (bt.projectPagesPath);            bt.projectResourcesPath = bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"Resources");            bt.projectResourcesPath = bt.ensurePathEndsInSlash (bt.projectResourcesPath);            bt.projectReportsPath = bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"Reports");            bt.projectReportsPath = bt.ensurePathEndsInSlash (bt.projectReportsPath);            bt.journalFilePath =  bt.ensurePathEndsInSlash( bt.settingsFolderPath)+BT_JOURNAL_FILE;            bt.chatterFilePath =  bt.ensurePathEndsInSlash( bt.settingsFolderPath)+BT_CHATTER_FILE;            bt.shippingLogFilePath = bt.ensurePathEndsInSlash( bt.settingsFolderPath)+BT_SHIPPINGLOG_FILE;           if (Folder(bt.userdataFolderPath).exists ==false) {                    if (Folder(bt.userdataFolderPath).create() == false) {                        bt.doAlert ("Installation Error: Failed To Create:"+bt.userdataFolderPath+" \n Please Create Now By Hand.\n Then click OK.");                    }            }            bt.pageThumbnailsPath = bt.addAnotherFolderToPath(bt.projectPagesPath,"thumbnails");            bt.pageTemplatesPath = bt.ensurePathEndsInSlash(bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"Templates"));            bt.submissionsFolderPath = bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"Submissions");            // new for image downloads            bt.clipartPath = bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"Clip Art");            bt.clipartPath = bt.ensurePathEndsInSlash (bt.clipartPath);            bt.createFolderIfRequired(bt.clipartPath);            bt.backgroundsPath = bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"Backgrounds");            bt.backgroundsPath = bt.ensurePathEndsInSlash (bt.backgroundsPath);            bt.createFolderIfRequired(bt.backgroundsPath);            bt.adbuilderPath = bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"AdBuilder Ads");            bt.adbuilderPath = bt.ensurePathEndsInSlash (bt.adbuilderPath);            bt.createFolderIfRequired(bt.adbuilderPath);            bt.imagesPath = bt.addAnotherFolderToPath(bt.getMyContentFolderPath(),"Downloaded");            bt.imagesPath = bt.ensurePathEndsInSlash (bt.imagesPath);            bt.createFolderIfRequired(bt.imagesPath);            bt.userId=0;  // debug stub            bt.getAdminInfo(); // project number , home page settings										//if(bt.dictionaryEnabled === true) {											//bt_dictionary.setCustomDictionary();										//}										//else {											//bt_dictionary.clearCustomDictionary();										//}           // set up content index file            bt.savedCMIndexFileFullPath=bt.localDataFolderPath+"BT_GalleryIndex.xml";            bt.deleteCMIndex();            // delete old index - till we version it            askBridgeToMakeTheCMIndexFile (bt.savedCMIndexFileFullPath, bt.ensurePathEndsInSlash(bt.prefData.btMyContentFolder));            bt.initBookPrefs(); // establish book preferences - this current book            // deliver startup scripts from Resources to startup scripts if not there           var startupScriptsPath = bt.getStartupScriptsFolderPath();  // rtns w trailing slash n.b, 2015 - still needed to delete startup scripts.           rtnBuffer += "Startup Scripts Path: "+startupScriptsPath+"\r";        if (new File(forwardSlasher(startupScriptsPath) + "BT_afterOpen.jsx").exists==true) {           bt.restartWarn=true;           bt.trashAFile( forwardSlasher(startupScriptsPath) + "BT_afterActivate.jsx" ); // remove startup scripts           bt.trashAFile( forwardSlasher(startupScriptsPath) + "BT_afterOpen.jsx" );      // remove startup scripts           bt.trashAFile( forwardSlasher(startupScriptsPath) + "BT_beforeSave.jsx" );   // remove startup scripts           bt.trashAFile( forwardSlasher(startupScriptsPath) + "BT_afterSave.jsx" );     // remove startup scripts           bt.trashAFile( forwardSlasher(startupScriptsPath) + "BT_beforeQuit.jsx" );    // remove startup scripts        }           if (bt.deliverOrUpdateResourceFile (BTFrameSpecDefaults)==true) {               pg.makeCustomFrameSpecsForThisTrimSize(bt.bookPref.bookSize.toString());           }          // ---------------------------------          //  Deliver and load swatch libraries - if not installed          //  BalfourColors.ase          //  BalfourXColors.ase          // ---------------------------------          //bt.deliverAndLoadBalfourSwatchFiles ();           // set default banner if present and no other image set           if (new File(bt.projectResourcesPath+BT_DEFAULTBANNER).exists==true) {               var defBanner = bt.projectResourcesPath+BT_DEFAULTBANNER;               if (bt.getPlatform()=="WIN") {                   defBanner=forwardSlasher(defBanner);               }               bt.setDefaultBannerImagePath(defBanner,true);           }           // make sure we have a chatter file           if (new File(bt.chatterFilePath).exists==false) {                var fChat=new File(bt.chatterFilePath);                fChat.encoding = "UTF-8";                fChat.open('w');                fChat.close();                bt.addChatterEntry('admin','Welcome To BalfourTools Chat');           }            if (bt.restartWarn==true) {                bt.doAlert ("Restart InDesign to complete BalfourTools installation or update.");                bt.quitInDesign();            }            bt.initialLogInfoReport();            app.addEventListener ("afterQuit", bt.afterQuit, false, undefined);            bt.deliverOrUpdateResourceFile (BT_COLORSPACE_FILENAME);   // color space settings            bt.deliverOrUpdateResourceFile (BT_PDF_PRESET_FILENAME);   // pdf export settings            bt.setInDesignColorSpace();          // check our book preview pdf pre set       try {            var pdfPreSet = app.pdfExportPresets.itemByName('BT_Book_PDF_Preview') ;            if (pdfPreSet.isValid==false) {                app.importFile (ExportPresetFormat.pdfExportPresetsFormat, bt.projectResourcesPath+ 'BT_Book_PDF_Preview.joboptions');                pdfPreSet = app.pdfExportPresets.itemByName('BT_Book_PDF_Preview') ;                 if (pdfPreSet.isValid==false){                     bt.wr("   Failed to load from Resources folder "+'BT_Book_PDF_Preview.joboptions' );                 }            }        } catch (e) {             bt.wr("bt.initLibrary exception on book preview pdf preset"+e+" "+bt.projectResourcesPath+ 'BT_Book_PDF_Preview.joboptions');        }        try {           // check our final pdf pre set            pdfPreSet = app.pdfExportPresets.itemByName(BT_PDF_PRESET_NAME) ;  // was 'Balfour_PDF_exportstyle'            if (pdfPreSet.isValid==false) {                app.importFile (ExportPresetFormat.pdfExportPresetsFormat, bt.projectResourcesPath+ BT_PDF_PRESET_FILENAME);  // was 'Balfour_PDF_exportstyle.joboptions'                pdfPreSet = app.pdfExportPresets.itemByName(BT_PDF_PRESET_NAME) ; //  was 'Balfour_PDF_exportstyle'                 if (pdfPreSet.isValid==false){                     bt.wr("   Failed to load from Resources folder "+BT_PDF_PRESET_FILENAME );  // was 'Balfour_PDF_exportstyle.joboptions'                 }            }        } catch (e) {             bt.wr("bt.initLibrary exception on final pdf preset "+e+" "+bt.projectResourcesPath+ BT_PDF_PRESET_FILENAME);        }           if (pdfPreSet.isValid==true){               app.pdfExportPreferences.properties = pdfPreSet.properties;           }           bt.renameOldGateFoldFiles(); // 3.2.8           bt.wr("          reached end of bt.initLibrary () ");           return rtn; } //--------------- if target == undefined, use app, else pass in doc ref.bt.deliverLoadAndUpdateBalfourSwatchFiles = function (target) {        if (target == undefined || target == null || target =="" || (target instanceof Document == false) ) {            target = app;        }        var tmpSrcFileRef = null;        var tmpSrcFileXRef = null;        var swatchFilePath = "";		var balfourColorName = 'Kelly Green No. 21';  // test color check for BalfourColor		var balfourXColorName = 'X9000';              // test color check for BalfourXColor	   if (bt.getPlatform()=="MAC")			swatchFilePath = bt.addAnotherFolderToPath(Folder.appPackage.parent,"Presets");	   else			swatchFilePath = bt.addAnotherFolderToPath(Folder.startup,"Presets");		swatchFilePath = bt.addAnotherFolderToPath(swatchFilePath,"Swatch Libraries");		swatchFilePath = bt.ensurePathEndsInSlash (swatchFilePath);        swatchFilePath = forwardSlasher(swatchFilePath);bt.wr("bt.deliverLoadAndUpdateBalfourSwatchFiles "+swatchFilePath+"BalfourXColors.ase");		var resourcesColorsRef = new File(forwardSlasher(bt.projectResourcesPath+"BalfourColors.ase"));		var resourcesXColorsRef = new File(forwardSlasher(bt.projectResourcesPath+"BalfourXColors.ase"));		if (resourcesColorsRef.exists==false) {			bt.wr ("bt.deliverLoadAndUpdateBalfourSwatchFiles missing swatch file error "+resourcesColorsRef.fsPath);			return;		}		if (resourcesXColorsRef.exists==false) {			bt.wr ("bt.deliverLoadAndUpdateBalfourSwatchFiles missing swatch file error "+resourcesXColorsRef.fsPath);			return;		}      // first see if need to deliver the files	   tmpSrcFileRef = new File(swatchFilePath+"BalfourColors.ase");  // was "TaylorColors.ai" now BalfourColors.ase	   if ( tmpSrcFileRef.exists==false ){		  if( resourcesColorsRef.copy(tmpSrcFileRef)==true){			  bt.wr("bt.deliverLoadAndUpdateBalfourSwatchFiles Delivered "+tmpSrcFileRef.name);		  } else {			  bt.wr("bt.deliverLoadAndUpdateBalfourSwatchFiles Failed to deliver "+tmpSrcFileRef.fsName); // note failure - but keep going we will load from resources copy		   }	   }	  tmpSrcFileXRef = new File(swatchFilePath+"BalfourXColors.ase");  //  was "TaylorXColors.ai" now now BalfourXColors.ase	  if ( tmpSrcFileXRef.exists==false ){		   if( resourcesXColorsRef.copy(tmpSrcFileXRef)==true){			  bt.wr("bt.deliverLoadAndUpdateBalfourSwatchFiles Delivered "+tmpSrcFileXRef.name);		  }		  else{			  bt.wr("bt.deliverLoadAndUpdateBalfourSwatchFiles Failed to deliver "+tmpSrcFileXRef.fsName); // note failure - but keep going we will load from resources copy		   }	   }      // then see if we need to load the colors	  var  obj  = target.swatches.itemByName (balfourColorName);	  var  objX = target.swatches.itemByName (balfourXColorName);	  if (obj.isValid==false) {                target.loadSwatches(resourcesColorsRef);                bt.wr("bt.deliverLoadAndUpdateBalfourSwatchFiles Load "+resourcesColorsRef.fsName)      }	  if (objX.isValid==false) {                target.loadSwatches(resourcesXColorsRef);                bt.wr("bt.deliverLoadAndUpdateBalfourSwatchFiles Load "+resourcesXColorsRef.fsName)      }	  // then rename any old color groups present-- CC or later only	  if ('colorGroups' in target ) {	      try {	  	    var grp = target.colorGroups.itemByName  ("TaylorColors");	  	    var grpX = target.colorGroups.itemByName ("TaylorXColors");			if (grp.isValid==true) {				grp.name = "BalfourColors"			}			if (grpX.isValid==true) {				grpX.name = "BalfourXColors"			}		  }catch (e) {		  	alert (e);		  }	  }}bt.createFolderIfRequired = function(path) {	try {		var newFolder = new Folder(path);		if(newFolder.exists === false) {			if(newFolder.create() === false) {				bt.wr("Could not create " + path);			}			else {				bt.wr("Created folder " + path);			}		}	}	catch(e) {		bt.wr("Exception in createFolderIfRequired " + path + " " + e.message);	}}bt.ifThisManufacturingBuildLogin = function () {    return false;   // stub out   // if (bt.prefData.mfgInterface==undefined) return false;   // if (bt.prefData.mfgInterface.toString()=="0") return false;  //  else {   //     bt.doLogin('Admin','MercyMe.2014');   //     return true;   //}}bt.createArrays = function (myIdleEvent) {    bt.wr('bt.createArrays');    bt.createArrayOfPageFilePaths(); // build array of file paths    myIdleEvent.parent.sleep = 0;}bt.getSettingsPath = function () {   return (bt.settingsFolderPath);}// inPath - logo src// rtn-> logo moved into settings file//bt.moveLogoFile=function (srcPath) {    var pathFrag = "Project";    pathFrag = bt.ensurePathEndsInSlash(pathFrag)+"Settings";    if (srcPath.indexOf(pathFrag)>0) return srcPath;    var fName = bt.getFileNameFromFilePath(srcPath);    var destPath = bt.getSettingsPath()+fName;    if (bt.copyFile(srcPath,destPath)==true) {        return destPath;    }    bt.wr("bt.moveLogoFile move failed -"+ srcPath+" to "+destPath);    return srcPath; }bt.initialLogInfoReport=function () {    var buf="";    buf += new Date().toLocaleString()+"\r";    buf += "Version "+bt.version+"\r";    buf += "OS "+bt.os+"\r";    buf +=  app.name+" "+app.version+"\r";    buf += "\r";    //buf += "System Verify\r";    //buf += "\r";    //buf += "Install Files\r";    //buf += bt.checkInstallFiles();    //buf += "InDesign Pages\r";    //buf += bt.checkPagesExist();    buf += "\r";    bt.wr(buf);    bt.wr("Project Path: "+bt.prefData.btProjectFolder);    bt.wr("Content Path: "+bt.prefData.btMyContentFolder);    bt.wr("Machine Name: "+bt.prefData.machineName);    bt.wr("Customer Number: "+bt.customerNumber);    bt.wr("Project Number: "+bt.projectNumber);}bt.doToolBar = function (keyString) {    var libName="Balfour.indl";    var myDoc=null;    var loc="";    var tmpstr="";    var x=0;    var pdfPreSet=null;    var user="";    var pageCount=0;    var panelKey="";    try {        myDoc=app.activeDocument;    }catch (e) {        myDoc=null;    }    bt.wr ("bt.doToolBar: "+ keyString);    switch (keyString) {        case "Preflight":   // palette openers - neees open doc          if (myDoc==null) return;               bt.togglePanel (keyString);                break;        case "Swatches":       // other palette openers        case "Links":        case "Character":        case "Stroke":        case "Notes":        case "Text_Wrap":               bt.togglePanel (keyString);                break;        case "Library":            //var libPath = pg.getLabel(app,"BT_PROJECTRESOURCESPATH")+libName;            var libPath = bt.projectResourcesPath+libName;            var libWasOpen=false;            for (x=0;x<app.libraries.length;x++) {                if (app.libraries[x] instanceof Library && app.libraries[x].name==libName) {                    libWasOpen=true;                    app.libraries[x].close();                }            }            if (libWasOpen==false){                    app.open(libPath);            }            break;        case "Open":            // loc =  pg.getLabel(app,"BT_PROJECTPAGESPATH");            loc = bt.projectPagesPath;            var ind = File(loc+"dummy.indd");            var myInDesignFile = ind.openDlg("Select Indesign Document");            if (myInDesignFile!=null) {                app.open(myInDesignFile);            }            break;        case "Save":            if (myDoc==null) return;            try {                myDoc.save();            } catch (e){                  bt.wr("bt.toolBar  error "+keyString+ " "+e);            }            break;        case "Check_Spelling":            if (myDoc==null) return;            app.menuActions.item("Check Spelling...").invoke();            break;        case "PasteInPlace":            if (myDoc==null) return;            try {                app.pasteInPlace();            } catch (e) {                 bt.wr("bt.toolBar  error "+keyString+ " "+e);            }            break;        case "Export_PDF":            if (myDoc==null) return;            bt.exportPDFfromOpenDocument (myDoc,true) ;            break;        case "Book_Preview":             var showPDFExportDialog=false;             pdfPreSet = app.pdfExportPresets.itemByName('BT_Book_PDF_Preview') ;             if (pdfPreSet.isValid==false) showPDFExportDialog=true;             //loc =  pg.getLabel(app,"BT_REPORTSFOLDER");             loc = bt.projectReportsPath;             //user = pg.getLabel(app,"BT_USERNAME");             user = bt.loginUserName;             //tmpstr = keyString+"_"+user+".indb";             tmpstr ="Book_"+bt.getUniqueId()+".indb";             var bookFilePath = loc+tmpstr;             var bookFile = new File(bookFilePath);             if (bookFile.exists==true) {                 var rresult=bookFile.remove();  // delete last version                 if (rresult != true) {                     bt.doAlert("Error: please close last book in Acrobat before re-creating.");                     break;                 }                 //bookFile = new File(bookFilePath);             }             try {                 var myBook=app.books.add(bookFile);                 pageCount = parseInt(bt.bookPref.numPages,10);                 // ui off                  app.scriptPreferences.userInteractionLevel=UserInteractionLevels.neverInteract;                 for (var i=parseInt(bt.bookPref.startPage,10);i<=pageCount;i++) {   // i=i+2                        if (i==1 || i%2==0) {                            myBook.bookContents.add(new File(bt.getPagesFilePath(i)));                        }                 }                myBook.save();                tmpstr=myBook.name;                tmpstr=tmpstr.toLowerCase();                tmpstr=tmpstr.replace(".indb",".pdf");                myBook.exportFile(ExportFormat.PDF_TYPE,File(loc+tmpstr),showPDFExportDialog,pdfPreSet);                bt.openHtml  (loc+tmpstr);                myBook.close();           } catch (e) {                app.scriptPreferences.userInteractionLevel=UserInteractionLevels.interactWithAll;                bt.doAlert ("Book preview failed "+e);           }                // ui on            app.scriptPreferences.userInteractionLevel=UserInteractionLevels.interactWithAll;            break;        case "Package":            if (myDoc==null) return;            if (bt.submitAsProcess==true) {                bt.changeAllSpotColorsToProcessColors(myDoc);                try {                    myDoc.save();                } catch (e){                      bt.wr("bt.toolBar  error "+keyString+ " "+e);                }           }            //loc=pg.getLabel (app,"BT_SUBMISSIONSFOLDER");            loc=bt.submissionsFolderPath;            tmpstr=myDoc.name;            tmpstr=tmpstr.toLowerCase();            tmpstr=tmpstr.replace(".indd","");            loc =bt.addAnotherFolderToPath (loc, tmpstr);            var dest = Folder(loc);            if (dest.exists==false) dest.create();            try {                myDoc.packageForPrint(dest, true, true, true, true, true, true, true, "my package notes",false);            } catch (e) {                  bt.doAlert ("Package failed "+e);            }            break;       default:            bt.wr("bt.toolBar  click "+keyString+ " not handled");            break;    }    return "ok";}bt.getStartupScriptsFolderPath=function(){    var inDesignPath = Folder.decode(Folder.appPackage);    if (bt.getPlatform()=="MAC") {        // on windows pts to the folder containing .exe        // on may points to the .app 'file'        inDesignPath = new File(inDesignPath).path;    }         // n.b., here we are use a cross platform format path works         // - so no back slash on windows - just append the folder path         //  this is OK here only where path is local to .jsx         //    var tempPath=inDesignPath+"/Scripts/startup scripts/";    return tempPath; }bt.checkInstallFiles=function() {    bt.wr ("bt.checkInstallFiles:");     var tmpFileObj=null;    var rtnBuffer="";    // files required in Resources    var resoucesFiles=["Balfour_PDF_2015.joboptions",    "Balfour.indl",    "BT_BlankPage.jpg",    "BT_Book_PDF_Preview.joboptions",    "BT_MissingPage.jpg",    "BT_CustomFrameSpecDefaults.xml",    "empty-11px.png",    "myFolderIcon.png",    "BalfourColors.ase",    "BalfourXColors.ase"];    var projectPath = bt.getProjectFolderPath();    rtnBuffer += "Project Path: "+projectPath+"\r";    rtnBuffer += "Content Folder Path: "+bt.getMyContentFolderPath()+"\r";						//var startupScriptsPath = bt.getStartupScriptsFolderPath();  // rtns w trailing slash						//rtnBuffer += "Startup Scripts Path: "+startupScriptsPath+"\r";						//var loc = pg.getLabel(app,"BT_PROJECTRESOURCESPATH");    var loc = bt.projectResourcesPath;    for (var r=0;r<resoucesFiles.length;r++) {        var lib =File(loc+resoucesFiles[r]);        if (lib.exists==false) {            rtnBuffer += resoucesFiles[r]+" is missing from the project Resources folder \r";        }    }    //if (Folder(pg.getLabel(app,"BT_USERDATAPATH")).exists==false){    if (Folder(bt.userdataFolderPath).exists==false) {         rtnBuffer += " No ./Settings/UserData/ Folder !";    }    /*    for (var x=0;x<bt.startupScriptNames.length;x++) {        if (File( startupScriptsPath+bt.startupScriptNames[x]).exists==false){            rtnBuffer += "Startup script missing: " + bt.startupScriptNames[x]+"\r" ;        }    }    */     var bookSize=parseInt(bt.bookPref.bookSize,10);     if (bookSize==0) {          rtnBuffer += "Book size not set." +"\r" ;     } else {    	// Report what FrameSpec files are here    	// BT_FrameSpecs0.xml, BT_FrameSpecs7.xml, BT_FrameSpecs8.xml, BT_FrameSpecs9.xml        var frameSpecFileName = BTFramesSpecsFileName.replace(".xml",bt.bookPref.bookSize.toString()+".xml");		tmpFileObj = new File(bt.settingsFolderPath+frameSpecFileName);		if (tmpFileObj.exists==false) {			rtnBuffer += "Warning: No Frame Spec for this book size in Settings ( "+frameSpecFileName+" )\r" ;		}     }    if (bt.getTemplatePathForThisSize(bookSize)=="") {         rtnBuffer += "Missing Blank template !" +"\r" ;    }    return rtnBuffer;}var debug = true;   // sets write to console, else wr to file//var rtn = bt.getFileNameFromFilePath("/Users/pjb/Desktop/Photo Shoots/111031_1303/FOLDER4/1y01004.jpg");//var rtn = bt.copyFile("/Users/pjb/Desktop/Photo Shoots/111031_1303/FOLDER4/1y01004.jpg","/Users/pjb/Desktop/Photo Folder/FXYB photos/00 Division/1y01004.jpg");bt._makeDlog = function (msgText,sName,atitle){        var arr = new Array(3);        var nameDialog = app.dialogs.add({name:atitle});        var msgBox = null;        with(nameDialog.dialogColumns.add())        {              with(dialogRows.add())              {                    staticTexts.add({staticLabel:msgText});                    var myEditField = textEditboxes.add({editContents:sName,minWidth:140}); //?               }             with(dialogRows.add())              {                        msgBox=staticTexts.add({msg:":",minWidth:200});                   }        }        //msgBox.staticLabel=msgText2;        nameDialog.dialogColumns.add();        arr[0] = nameDialog;        arr[1] = myEditField;        arr[2] = msgBox;        return (arr); }bt.openInDesignDocument=function(path) {    try {        app.open(path);      } catch (e) {          bt.wr("bt.openInDesignDocument Error "+e+" path");          return false;      }  return true;}bt.openInDesignDocumentByPageNumSimple = function (pageNumStr,userName) {    bt.wr("bt.openInDesignDocumentByPageNumSimple "+pageNumStr+" "+userName);    if (userName==undefined) userName = bt.loginUserName;    var rtn = true;    var pageNum = parseInt(pageNumStr, 10);	var leftPageNum=0;	var docRef = null;	if (pageNum%2!=0 && pageNum != 1) {		leftPageNum=pageNum-1;	} else {		leftPageNum=pageNum;	}	var docPath=bt.getPagesFilePath(leftPageNum);	var docName = bt.getFileNameFromFilePath(docPath);	// perhaps we already have this document open...	docRef = app.documents.itemByName(docName);    // 2-14-17	if (docRef instanceof Document == true && docRef.isValid==true) {	   app.activeDocument = docRef;	   return docRef;	}	// isThisPageCheckedOut  -  ignores locally checked out pages (i hope), but finds others	if (bt.isThisPageCheckedOut (pageNum) == true) {		 bt.doAlert("Sorry. "+bt.readPseudoLockFileInfo (pageNum));		 rtn = false;	}	if ((rtn == true ) && (bt.isThisPageOpen(pageNum)==true)) {		 bt.doAlert("Sorry. Page "+pageNum+" is in use.");		 rtn = false;	}    if (rtn == true ) {		try {				docRef = app.open(File(docPath));				if (docRef instanceof Document == true) {					 rtn = docRef;					 bt.addJournalEntry (userName,"Opened",docRef.name,"");				} else {					rtn = false;				}		} catch (e) {			bt.wr("bt.openInDesignDocumentByPageNumSimple exception "+e+" "+docPath);		   	rtn = false;		}    }    return rtn;  // rtn false or docRef}bt.openInDesignDocumentByPageNum = function (pageNumStr,userName) {    bt.wr("bt.openInDesignDocumentByPageNum "+pageNumStr+" "+bt.loginUserName);    var pageNum = parseInt(pageNumStr, 10);        var leftPageNum=0;        if (pageNum%2!=0 && pageNum != 1) {            //bt.wr("openDocByPageNum error - page num should be even or 1");            leftPageNum= pageNum -1;          //  return "";        }        else leftPageNum=pageNum;         if (bt.isThisPageOpen(pageNum)==true) {             bt.doAlert("Sorry. Page "+pageNum+" is in use.");             return false;         }        // convert locally to 'leftPageNum ' to find correct spread.       var projectPagesPath = bt.getProjectFolderPath();       projectPagesPath = bt.addAnotherFolderToPath(projectPagesPath,"Pages");       // these will ensure folder and doc exist and create one if not !       var spreadFolderPath = bt._makeSpreadFolder (projectPagesPath,leftPageNum);       var result = bt._openSpreadDoc (spreadFolderPath,leftPageNum,true);        if (result=="ok"){            //bt.setInDesignXMPMetaDataWhileDocOpen(app.activeDocument,BT_LAST_USER,userName )            bt.addJournalEntry (bt.loginUserName,"Opened",app.activeDocument.name,"");       }       return (true);}bt.setColPrefs = function(xmlString) {        bt.prefData.btColumnOptions= new XML(xmlString);        bt.writeXMLToFile (bt.prefFilePath,"Preferences",bt.prefData,null); }bt.getColPrefs = function() {        return(bt.prefData.btColumnOptions.toXMLString()); }bt.isThisAValidProjectFolder = function (folderPath, showAnAlert) {    if (folderPath=="") return false;    var testList =["Resources","Pages","Settings","Submissions","Templates","Reports"];  // edit 12/2/14    var fldr = new Folder(folderPath);    if (fldr instanceof Folder == true && fldr.exists==true) {       var subFolderList = (fldr.getFiles(_btOnlyFolders)).toString();       for (var i=0;i<testList.length;i++) {           if (subFolderList.indexOf(testList[i])<0) {               if (showAnAlert) {                   bt.doAlert("This does not look like a valid BalfourTools project folder ! Select another.");               }               bt.wr("Invalid project folder selected - missing sub-folder "+testList[i]);               bt.wr("      folder path: "+folderPath);               return false;           }       }    } else {        return false;    }     return true;}bt.getDefaultPrefs= function(){	// use repeat for formatting	// use smallCode for closeandsave   // "+Folder.myDocuments.fullName.toString()+"	var xmlDefaultText="<Pref>"+				"<prefsversion>3</prefsversion>"+                  "<btProjectFolder></btProjectFolder>"+                  "<btMyContentFolder></btMyContentFolder>"+                  "<btProjectFolderName></btProjectFolderName>"+                  "<btMyContentFolderName></btMyContentFolderName>"+                  "<btColumnOptions name='true' path='false' gallery='false' user='true' date='true' size='true' dimen='true' pguse='false'  tags='false'  like='false'  rating='false'  location='false'  caption='false' />"+                   "<btShowOnlyUnused>false</btShowOnlyUnused>"+                   "<mfgInterface>0</mfgInterface>"+		"</Pref>";	try{			var xmlData = new XML(xmlDefaultText);		} catch (e) {				bt.wr ("bt.getDefaultPrefs: "+e);			return null;		}		return (xmlData);}bt.setdebug = function (bool) {    bt.debug=bool;}bt.getShowOnlyUnused = function () {    if (bt.prefData.btShowOnlyUnused==undefined) {        bt.prefData.btShowOnlyUnused="false";    }    var rtn = (bt.prefData.btShowOnlyUnused.toString() == "true").toString();  // be verbose    return (rtn);}bt.setShowOnlyUnused = function (boolValue) {   bt.prefData.btShowOnlyUnused =(boolValue.toString()=="true");   //bt.wr("setShowOnlyUnused "+ boolValue+" "+bt.prefData.toString());   bt.syncPrefs();}bt.getProjectFolderPath= function() {    return Folder.decode(bt.prefData.btProjectFolder);}bt.getProjectFolderName= function() {    return bt.prefData.btProjectFolderName;}bt.getMyContentFolderPath= function() {    return Folder.decode(bt.prefData.btMyContentFolder);}bt.getMyContentFolderName= function() {    return bt.prefData.btMyContentFolderName;}bt.setProjectFolderPath= function(path) {     bt.prefData.btProjectFolder=path;}bt.setMyContentFolderPath= function(path) {     bt.prefData.btMyContentFolder=path;}bt.syncPrefs= function() {     bt.writeXMLToFile (bt.prefFilePath,"Preferences",bt.prefData,null);}bt.setProjectFolderPrefs=function(tmpPath) {     bt.setProjectFolderPath(tmpPath);    bt.prefData.btProjectFolderName=bt.getFolderNameFromPath(tmpPath);    bt.syncPrefs();}bt.setContentFolderPrefs=function(tmpPath) {     bt.setMyContentFolderPath(tmpPath);    bt.prefData.btMyContentFolderName=bt.getFolderNameFromPath(tmpPath);    bt.syncPrefs()}bt.getSubFoldersList=function(path) {  var arr=[];  var myFolderList="";  var aNames=[];  var fldr = Folder(path);    arr=fldr.getFiles(_btOnlyFolders);    for (var i=0;i<arr.length;i++) {       if (i>0) myFolderList+= ",";       myFolderList+= File.decode(arr[i].name);    }   return (myFolderList);}bt.getFileList3=function(path) {  var arr = new Array();  var myFileList="";  try {      var fldr = Folder(path);        arr = fldr.getFiles(_btOnlyFiles);        for (var i=0;i<arr.length;i++) {           if (i>0) myFileList+= ",";           myFileList+= File.decode(arr[i].name);        }   }catch(e){;   }   return (myFileList);}// note this exception . not a bt.functionfunction _btOnlyFiles(f) {  if (f.constructor.name == "File") {    return true;  } else {    return false;  }}//// note this exception . not a bt.function// modify 12/31/13//function _btOnlyFolders(f) {  if (f.constructor.name == "File") {    return false;  } else if (f.constructor.name == "Folder") {    return true;  }  return false;}bt.newMakeAnInDesignTemplateThumbnail  = function (templateDocPath, targetThumbnailPath ) {    app.scriptPreferences.userInteractionLevel=UserInteractionLevels.neverInteract;    var allOkay = true; bt.wr("--- bt.newMakeAnInDesignTemplateThumbnail "+templateDocPath);    try {      var myDoc = app.open(templateDocPath,true,OpenOptions.OPEN_ORIGINAL);    } catch (e) {         bt.wr("bt.newMakeAnInDesignTemplateThumbnail:(app.open) "+e+" "+templateDocPath);         bt.wr(myDoc);       allOkay=false;    }    if (allOkay==true) {        try {            var thumbnailFile = new File (targetThumbnailPath);        } catch (e) {               bt.wr("bt.newMakeAnInDesignTemplateThumbnail:(new target) "+e+" "+targetThumbnailPath);             allOkay=false;        }    }     if (allOkay==true) {         var thumbnailFolder = new Folder (thumbnailFile.path);        if (thumbnailFolder.exists==false) {            if (thumbnailFolder.create()==false) {                 bt.wr ("bt.newMakeAnInDesignTemplateThumbnail error on thumbnail folder create "+thumbnailFile.path+" "+e);                  allOkay=false;             }        }     }    if (allOkay==true) {           try{                app.jpegExportPreferences.exportingSpread=true;                app.jpegExportPreferences.jpegColorSpace=JpegColorSpaceEnum.RGB;                app.jpegExportPreferences.exportResolution = 72;                app.jpegExportPreferences.jpegExportRange=ExportRangeOrAllPages.EXPORT_ALL;                app.jpegExportPreferences.jpegQuality = JPEGOptionsQuality.LOW;                app.jpegExportPreferences.jpegRenderingStyle = JPEGOptionsFormat.BASELINE_ENCODING;                myDoc.exportFile(ExportFormat.JPG, thumbnailFile);            }catch(e){                     bt.wr ("bt.newMakeAnInDesignTemplateThumbnail: (jpegExportPreferences) "+e);                     allOkay=false;            };    }    if (myDoc instanceof Document) {        myDoc.close(SaveOptions.NO);  // close no save    } else {     	bt.wr ("bt.newMakeAnInDesignTemplateThumbnail: no close of myDoc= "+myDoc);    }    app.scriptPreferences.userInteractionLevel=UserInteractionLevels.interactWithAll;    return allOkay;}// for indesign templatesbt.makeAllInDesignTemplateThumbnailsByFolderPath=function (folderPath) {    var thumbsMade = 0;    try {        var fldr = Folder (folderPath);    } catch (e) {        bt.wr ("bt.makeAllInDesignTemplateThumbnailsByFolderPath error "+folderPath+" "+e);        return;    }    var myFileList=fldr.getFiles(/\.(indt)$/i);   // was (/\.(indd|indt)$/i)    for (var x=0; x<myFileList.length; x++) {        var fi = File(myFileList[x]);        var targetThumbnailPath= bt.addAnotherFolderToPath (fi.path, 'thumbnails');        targetThumbnailPath = bt.ensurePathEndsInSlash(targetThumbnailPath);        targetThumbnailPath += fi.name.toString().replace('.indt','');        targetThumbnailPath +=  "_0.jpg";        bt.newMakeAnInDesignTemplateThumbnail  (fi.fsName, targetThumbnailPath );        thumbsMade++;    }	return thumbsMade.toString();}// newTraversal - returns an array of folder objects function newTraversal (fileObject,arr) {		if (fileObject.constructor.name == "Folder" && fileObject.name!="thumbnails"){			arr.push(fileObject);			var allFiles = fileObject.getFiles(_btOnlyFolders);			for (var t=0; t<allFiles.length;t++) {				newTraversal(allFiles[t],arr);			}		}	return arr;}// for indesign docsbt.makeAllInDesignThumbnailsByFolderPath=function (folderPath) {    try {        var fldr = Folder (folderPath);    } catch (e) {        bt.wr ("bt.makeInDesignThumbnailsByFolderPath error "+folderPath+" "+e);        return;    }    var myFileList=fldr.getFiles(/\.(indd)$/i);   // was (/\.(indd|indt)$/i)    for (var x=0; x<myFileList.length; x++) {        var fi = File(myFileList[x]);        bt.extractInDesignThumbnails(bt.ensurePathEndsInSlash(fi.path),fi.name,bt.addAnotherFolderToPath (fi.path, 'thumbnails'));    }}// n.b. - filepath must end in a slash// rtn # of previews made// only need to call this once per spread//bt.extractInDesignThumbnails=function (srcFilePath,srcFileName,destFilePath) {//bt.wr("DEBUG     extractInDesignThumbnails:"+srcFilePath+" "+srcFileName+" "+destFilePath);        // - thumbnail extract from blog: http://tomaxxi.com/2010/08/extract-file-preview-stored-in-adobe-xmp-data/        try {        var myFile = File(bt.addAnotherFolderToPath(srcFilePath,srcFileName)); //File.openDialog("Select InDesign source file", undefined, false);        } catch (e) {            bt.wr ("bt.extractInDesignThumbnails error "+filePath+" "+e);            return 0;        }        if (myFile.exists==false) {              bt.wr ("bt.extractInDesignThumbnails error file missing "+myFile.fsName);            return 0;        }        if (myFile.length==0) {              bt.wr ("bt.extractInDesignThumbnails error file 0 length "+myFile.fsName);            return 0;        }        //var destFilePath = btdestPath+"thumbnails/";        destFilePath = bt.ensurePathEndsInSlash(destFilePath);        var fldr = Folder (destFilePath);        if (fldr.exists==false) {            if (fldr.create()==false) {                 bt.wr ("bt.extractInDesignThumbnails error on thumbnail folder create "+destFilePath+" "+e);                 return 0;             }        }        var destFileName = srcFileName; //.toLowerCase()        destFileName = destFileName.replace("\.indt","");        destFileName = destFileName.replace("\.indd","");        if(bt_xmp.loadXMPLibrary() && myFile != undefined ){            xmpFile = new XMPFile(myFile.fsName, XMPConst.UNKNOWN, XMPConst.OPEN_FOR_READ);            var myXmp = xmpFile.getXMP();            xmpFile.closeFile(XMPConst.CLOSE_UPDATE_SAFELY);            bt_xmp.unloadXMPLibrary();        }        var myPreviews = Array();        if(myXmp){            thumbCnt = myXmp.countArrayItems(XMPConst.NS_XMP,"Thumbnails");            pagInfCnt = myXmp.countArrayItems(XMPConst.NS_XMP,"PageInfo");            if(thumbCnt != 0 ){   // && thumbCnt>=pagInfCnt                pagePrevCnt = thumbCnt;                XMPnode = "Thumbnails";            }else if(pagInfCnt != 0){                pagePrevCnt = pagInfCnt;                XMPnode = "PageInfo";            }else{                bt.wr("extractInDesignThumbnails No Data saved for "+srcFileName);                return 0;            }            for(var i = 1; i <= pagePrevCnt; i++){                var myTemp = String(myXmp.getProperty(XMPConst.NS_XMP, XMPnode+"[" + i + "]/xmpGImg:image"));                myTemp = myTemp.replace("/*missing*/","n");                myPreviews.push(myTemp);            } // bt.wr("DEBUG  myPreviews.length:"+myPreviews.length)            for(var i = 0; i < myPreviews.length; i++){                myPreview = decode64(myPreviews[i]);                myOutput = new File (destFilePath+destFileName+"_"+(i ) + '.jpg');                myOutput.encoding = 'binary';                myOutput.open ('w');                myOutput.write (myPreview);                myOutput.close();            }        }else {            bt.wr("extractInDesignThumbnails error - no thumbnail Xmp data "+myFile.fsName);       }    return myPreviews.length;}bt.readSharedDataFile = function(fileName) {        var rBuf="";        var gotFile=false;        var loopCount =0;        //var loc = pg.getLabel(app,"BT_SETTINGSPATH");        var loc = bt.settingsFolderPath;		var myReadFile = new File(loc+fileName);		if (myReadFile.exists==false)		{			bt.wr  ("bt.readSharedDataFile - file does not exist: "+File.decode(loc+fileName));			return ("");		}		if (myReadFile != null)		{			myReadFile.encoding = "UTF-8";              while (gotFile==false) {                      gotFile = myReadFile.open('r')// open for read                      if (gotFile==true) break;                      // try for 5 secs to get file                      if (gotFile==false & loopCount <10){                          $.sleep(500);                          loopCount++;                      } else break;               }                if (gotFile==true) {                    var rBuf = myReadFile.read();                    myReadFile.close();                }          }          return rBuf;}bt.addJournalEntry = function(who,did,what,comment) {    // keep this file as an xml list - of entry's - wrap its contents when needed    // format = <entry><timestamp>timestamp</timestamp><who>James</who><did>some action</did><what>some data</what><comment>additional info</comment></entry>    // bt.journalFilePath    //    bt.wr("bt.addJournalEntry: "+who+" "+did+" "+what+" "+comment);    //var fileLoc = pg.getLabel(app,"BT_JOURNALFILEPATH");    var fileLoc = bt.journalFilePath;    var entry="<entry><timestamp>"+new Date().getTime()+"</timestamp><dt>"+new Date().format("yyyy-MM-dd h:mm:ss")+"</dt><who>"+who+"</who><did>"+did+"</did><what>"+what+"</what><comment>"+comment+"</comment></entry>";    return bt.writeLineShared(entry, fileLoc);}bt.addShippingEntry = function(name, action) {	bt.wr("addShippingEntry name " + name + " action " + action);	var entry = "<entry><timestamp>"+new Date().getTime()+"</timestamp><dt>"+new Date().format("yyyy-MM-dd h:mm:ss")+"</dt><name>" + name +"</name><action>" + action + "</action></entry>";	var fileLoc = bt.shippingLogFilePath;	return bt.writeLineShared(entry, fileLoc);};bt.writeLineShared = function(entry, fileLoc) {    var jrnlFile= new File(fileLoc);    jrnlFile.encoding="UTF-8";    if (jrnlFile.exists==false){        bt.wr("bt.writeLineShared - no file "+fileLoc);    }    var gotFile=false;    var loopCount =0;     while (gotFile==false) {          gotFile = jrnlFile.open('a');  // open for append          if (gotFile==true) break;          // try for 5 secs to get file          if (gotFile==false & loopCount <10){              $.sleep(500);              loopCount++;          } else break;     }    if (gotFile==true) {     jrnlFile.writeln(entry);     jrnlFile.close();    }    else {    	bt.wr("writeLineShared could not open file " + fileLoc);    }    return gotFile;  // t on successful write};// eithre clear it all, of clear by name or by date// op =="all" || "who" || "when"bt.purgeChatter = function (op,oparg) {    oparg = oparg.toString();    var newChatContents="";    var chatFile= new File(bt.chatterFilePath);    var  writeToFile = false;    var nodeList = false;    chatFile.encoding="UTF-8";    if (chatFile.exists==true) {            try {                var xmlData = new XML("<chat>"+bt.getChatter()+"</chat>");            } catch (e) {                bt.wr('bt.purgeChatter '+e);                return;            }            if (op=="all") {                newChatContents="";                 writeToFile = true;            } else if (op=='who') {                 nodeList = xmlData.descendants("entry").(who != oparg); // good expression - n.b., selecting nodes to keep                 if (nodeList==false) {                     writeToFile = false;                 } else {                     writeToFile = true;                     newChatContents = nodeList.toString();                 }            } else if (op=='when') {                try {                     bt.wr("bt.purgeChatter oparg " + oparg);                     var msInADay = 86399000;                     var aTmp=oparg.split(' ');  // strip off time part of dt element                     oparg = aTmp[0];                     aTmp = oparg.split('-');  // now break into Y,M,D                     //aTmp[2]="20"+aTmp[2];   // make 14 -> 2014                     aTmp[2]= parseInt(aTmp[2],10);      //d                     aTmp[1]= parseInt(aTmp[1],10) - 1;     //month is zero based                     aTmp[0]= parseInt(aTmp[0],10);  //y                     bt.wr("bt.purgeChatter Y " + aTmp[0].toString() + " M " + aTmp[1].toString() + " D " + aTmp[2].toString());                     var ts = new Date(aTmp[0],aTmp[1],aTmp[2]);   // new Date(y,m,d)                     ts = ts.getTime();                     var ts2 = ts+msInADay;                     bt.wr("ts " + ts.toString() + " ts2 " + ts2.toString());                      nodeList = xmlData.descendants("entry").(timestamp < ts || timestamp > ts2);  // n.b., selecting nodes to keep :)                      bt.wr("nodeList " + nodeList.toString());                      writeToFile = true;                 } catch (e) {                      bt.wr('bt.purgeChatter error on date parse:'+e);                      writeToFile = false;                 }                 if (nodeList==false) {                     writeToFile = false;                 } else {                     writeToFile = true;                     newChatContents = nodeList.toString();                 }            } 			// var xpathexpr = "//lang[@code=\'"+langCode+"\']";  // pattern to find lang element(s)  by attribute			 // var myNode = xmlList.xpath(xpathexpr);    //var toDelete = xmlData.who.contains(oparg);   // $ .writeln (toDelete.length());         if (writeToFile==true) {                 if (newChatContents=="") {                       chatFile.remove();                       bt.wr("bt.purgeChatter: purged all");                 } else {                       if ( chatFile.open('w')==true) {                               chatFile.write(newChatContents);                               chatFile.close();                               bt.wr("bt.purgeChatter: purged by name ="+oparg);                       } else {                           bt.wr("bt.purgeChatter: failed to open chat file");                       }             }         }     }}bt.getChatter = function () {    var chatFile= new File(bt.chatterFilePath);    chatFile.encoding="UTF-8";    if (chatFile.exists==false) {        bt.wr("bt.getChatter - create new chatter file " +bt.chatterFilePath);                  // make sure we have a chatter file         var fChat=new File(bt.chatterFilePath);         fChat.encoding = "UTF-8";         fChat.open('w');         fChat.close();         bt.addChatterEntry('admin','Welcome To BalfourTools Chat');    }    return(bt.readSharedDataFile(BT_CHATTER_FILE));}bt.addChatterEntry = function(who,comment) {    bt.wr("bt.addChatterEntry:"+who+" "+comment);    //    // keep this file as an xml list - of entry's - wrap its contents when needed    //   var entry="<entry><timestamp>"+new Date().getTime()+"</timestamp><dt>"+new Date().format("yyyy-MM-dd h:mm:ss")+"</dt><who>"+who+"</who><comment>"+comment+"</comment></entry>";    var jrnlFile= new File(bt.chatterFilePath);    jrnlFile.encoding="UTF-8";    bt.wr("addChatterEntry "+who+" "+comment);    if (jrnlFile.exists==false) {        bt.wr("bt.addChatterEntry: create new chatter file " +bt.chatterFilePath);                  // make sure we have a chatter file         var fChat=new File(bt.chatterFilePath);         fChat.encoding = "UTF-8";         fChat.open('w');         fChat.close();    }    var gotFile=false;    var loopCount =0;     while (gotFile==false) {          gotFile = jrnlFile.open('a');  // open for append          if (gotFile==true) break;          // try for 5 secs to get file          if (gotFile==false & loopCount <10){              $.sleep(500);              loopCount++;          } else break;     }    if (gotFile==true) {     jrnlFile.writeln(entry);     jrnlFile.close();    }    return gotFile;  // t on successful write}bt.saveToText = function (anHtmlString) {    var buf  = anHtmlString.replace(/<[^>]+>/ig,''); // sring html tags out    var f =new File(bt.ensurePathEndsInSlash(Folder.myDocuments)+"VerifyLog.txt").saveDlg('Save A Text File',"");     if (f==null) return;    f.open('w');    f.write(buf);    f.close(); }bt.saveHistoryToCsv = function(fName) {    var buf = bt.readSharedDataFile(fName);    buf = buf.replace(/,/g,';');    // no commas in csv    buf = buf.replace(/<entry><timestamp>(\d+)<\/timestamp><dt>/g,""); // remove timestamp column    buf = buf.replace(/<\/dt><who>/g,",");    buf = buf.replace(/<\/who><did>/g,",");    buf = buf.replace(/<\/did><what>/g,",");    buf = buf.replace(/<\/what><comment>/g,",");    buf = buf.replace(/<\/comment><\/entry>/g,"\r");	var buf2 = "When,User,Action,Target,Comment\r";	buf2 += buf;    var f =new File(bt.ensurePathEndsInSlash(Folder.myDocuments)+"History.csv").saveDlg('Save History .csv File',"");    if (f==null) return;    f.open('w');    f.write(buf2);    f.close(); }bt.saveChatToCsv = function(fName) {    var buf = bt.readSharedDataFile(fName);    buf = buf.replace(/,/g,';');    // no commas in csv    buf = buf.replace(/<entry><timestamp>(\d+)<\/timestamp><dt>/g,""); // remove timestamp column    buf = buf.replace(/<\/dt><who>/g,",");    buf = buf.replace(/<\/what><comment>/g,",");    buf = buf.replace(/<\/comment><\/entry>/g,"\r");    var f =new File(bt.ensurePathEndsInSlash(Folder.myDocuments)+"Chat.csv").saveDlg('Save Chat .csv File',"");    if (f==null) return;    f.open('w');    f.write(buf);    f.close(); }bt.savePageListInfoToCsv = function () {    var pageCount = parseInt(bt.bookPref.numPages,10);    var tmpstr="";    var newEntry=null;    var arr=new Array(4);    var buf = "Pages,Section,Description,Status,Flow\r";        //var buf = "Pages,Section,Description,Status,Flow,Submission Status\r";    var submission="";     var f =new File(bt.ensurePathEndsInSlash(Folder.myDocuments)+"PageList.csv").saveDlg('Save page list information as a .csv file',"");    if (f==null) return;    var xmlPageDataString = bt.readPageThumbnailList();    xmlPageDataString = "<pagethumbnails>"+xmlPageDataString+"</pagethumbnails>"; // my into xml from xml list    try {        xmlPageData = new XML(xmlPageDataString);    } catch (e) {        bt.wr("bt.savePageListInfoToCsv error "+e);        return "";    }    for (var dex=1; dex<=pageCount; dex++) {            tmpstr = bt.getFileNameFromFilePath(bt.getPagesFilePath(dex));            if (dex%2==0) {               arr[0] = bt._getPageXMPByPageNumAndMetaLabel(dex,"BT_LeftPageFlowGroupName");               arr[1] = bt._getPageXMPByPageNumAndMetaLabel(dex,"BT_LeftPageSection");               arr[2] = bt._getPageXMPByPageNumAndMetaLabel(dex,"BT_LeftPageDescription");               arr[3] = bt._getPageXMPByPageNumAndMetaLabel(dex,"BT_LeftPageStatus");            } else {                arr[0] = bt._getPageXMPByPageNumAndMetaLabel(dex,"BT_RightPageFlowGroupName");                arr[1] = bt._getPageXMPByPageNumAndMetaLabel(dex,"BT_RightPageSection");                arr[2] = bt._getPageXMPByPageNumAndMetaLabel(dex,"BT_RightPageDescription");                arr[3] = bt._getPageXMPByPageNumAndMetaLabel(dex,"BT_RightPageStatus");            }      /*        try {           submission = xmlPageData.item[dex].statustext.toString();           if (submission.length>2) {               submission+=" on "+xmlPageData.item[dex].timestamp.toString();           }        } catch (e) {            submission="";             bt.wr("bt.savePageListInfoToCsv submission info error "+e);        }        buf += bt.num3digits(dex)+","+ arr[1]+","+ arr[2]+","+ arr[3]+","+arr[0]+","+submission+"\r";        */        buf += bt.num3digits(dex)+","+ arr[1]+","+ arr[2]+","+ arr[3]+","+arr[0]+"\r";    }    f.open('w');    f.write(buf);    f.close();    return("ok"); }// ---------logging--------------bt.wr=function(str){	var d = new Date();	if (bt.logF==null)	{		bt.logfile_open(bt.localDataFolderPath+"BT_LogFile.txt");		bt.logF.writeln("BT_LogFile_" + new Date().format("yyyyMMddhmmss") + ".txt")         bt.logF.writeln ("js version: "+bt.version);         bt.pruneOldLogFiles();	}	if (bt.logF!=null) {        bt.logF.writeln (d.toLocaleString()+ " "+str);        if (bt.debug==true) {           //$.writeln(str); // comment out before compiling !        }    }}var BTLOGFILELIMIT = 5;bt.pruneOldLogFiles = function() {	var logFolder = new Folder(bt.localDataFolderPath);	if(logFolder.exists == true) {		var files = logFolder.getFiles("BT_LogFile*.txt");		if(files != null) {			if(files.length > BTLOGFILELIMIT) {				var oldestDate = null;				var oldestIndex = -1;				for(var i = 0; i < files.length; i++) {					if(oldestDate == null) {						oldestDate = files[i].modified;					}					else {						if(files[i].modified < oldestDate) {							oldestDate = files[i].modified;							oldestIndex = i;						}					}				}				if(oldestIndex != -1) {                    bt.logF.writeln("Deleting old log file " + files[oldestIndex].fsName);					files[oldestIndex].remove();				}			}		}	}};bt.logfile_open=function(myLogPath){	bt.logF = new File(myLogPath);	if(bt.logF.exists == true) {		bt.archiveOldLog(myLogPath);	}	if (bt.logF != null)	{		bt.logF.open('w');	}}bt.archiveOldLog = function(myLogPath) {	var nameForOldLog = bt.getNameForOldLog();    var res=false;    try {          var bu = new File(bt.localDataFolderPath+nameForOldLog);          bu.open('w');          bt.logF.seek(0);          var logBuffer = bt.logF.read();          bu.write(logBuffer);          bu.close();          bt.logF.seek(0);          bt.logF.writeln("BT_LogFile_" + new Date().format("yyyyMMddhmmss") + ".txt")          bt.logF.writeln ("js version: "+bt.version);          // res=bt.logF.rename(nameForOldLog) ;    }catch (e) {        //$.writeln(e);    }    if (res==true) {	    bt.logF = new File(myLogPath);    } else {        //$.writeln ("bt.archiveOldLog rename failed "+res+" "+bt.logF.error);    }};bt.getNameForOldLog = function() {	var ret = "";	bt.logF.open('r');	var firstLine = bt.logF.readln();	if(firstLine.indexOf("BT_LogFile") == 0) {		ret = firstLine;	}	else {		ret = "BT_LogFile_old.txt";	}	return ret;}bt.logfile_close= function(){	if (bt.logF != null)	{		bt.logF.close();	}	bt.logF=null;}bt.getIsValid = function () {    return bt.valid;}//------------- end loggingbt.isYes=function(s){	if (s=="yes" || s =="Yes" || s=="YES" || s=='TRUE'||s=='True'||s=='true' || s==true) return true;	else		return false;}bt.boolToString=function(booly){	if (booly==true)		return "yes";	else		return "no";}function decode64(input) {    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";    var output = "";    var chr1, chr2, chr3 = "";    var enc1, enc2, enc3, enc4 = "";    var i = 0;    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");    do {        enc1 = keyStr.indexOf(input.charAt(i++));        enc2 = keyStr.indexOf(input.charAt(i++));        enc3 = keyStr.indexOf(input.charAt(i++));        enc4 = keyStr.indexOf(input.charAt(i++));        chr1 = (enc1 << 2) | (enc2 >> 4);        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);        chr3 = ((enc3 & 3) << 6) | enc4;        output = output + String.fromCharCode(chr1);        if (enc3 != 64) {output = output + String.fromCharCode(chr2);}        if (enc4 != 64) {output = output + String.fromCharCode(chr3);}        chr1 = chr2 = chr3 = "";        enc1 = enc2 = enc3 = enc4 = "";    } while (i < input.length);    return output;}bt.readXMLFileIntoText = function(thisPath,fileDescription){	if (thisPath==null || thisPath=="")	{		var myReadFile = File.openDialog ("Locate "+fileDescription+" File ", "XML file:*.xml", false);	}	else	{		var myReadFile = new File(thisPath);		if (myReadFile.exists==false)		{			bt.wr  (fileDescription+"  file does not exist: "+File.decode(thisPath));			return (null);		}	}		if (myReadFile != null)		{			myReadFile.encoding = "UTF-8";			if (myReadFile.name.toString().toLowerCase().indexOf(".xml")<=0)			{					bt.wr (myReadFile.name+ " is wrong file type.");					return null;			}			if(myReadFile.open('r')!=true)			{				bt.wr ("Failed to read "+fileDescription+" file");				return (null);			}			var rBuf = myReadFile.read();			myReadFile.close();		}	return(rBuf);}//-----------------------------------------------////      XML file read/write////----------------------------------------------bt.readFileIntoXML = function(thisPath,fileDescription){	if (thisPath==null || thisPath=="")	{		var myReadFile = File.openDialog ("Locate "+fileDescription+" File ", "XML file:*.xml", false);	}	else	{		var myReadFile = new File(thisPath);		if (myReadFile.exists==false)		{			bt.wr  (fileDescription+"  file does not exist: "+File.decode(thisPath));			return (null);		}	}		if (myReadFile != null)		{			myReadFile.encoding = "UTF-8";			if (myReadFile.name.toString().toLowerCase().indexOf(".xml")<=0)			{					bt.wr (myReadFile.name+ " is wrong file type.");					return null;			}			if(myReadFile.open('r')!=true)			{				bt.wr ("Failed to read "+fileDescription+" file");				return (null);			}			var rBuf = myReadFile.read();			myReadFile.close();			try {                XML.prettyPrinting=false;  // important !!  do not undo this line !!  pjb                XML.ignoreComments=true;                XML.ignoreWhitespace=false;                XML.ignoreProcessingInstructions=true;				var xmlData = XML(rBuf);			}			catch (e)			{				bt.wr (fileDescription+" xml file format error "+e);				return (null);			}		}	return(xmlData);}bt.writeTextToXMLFile=function (thisPath,fileDescription,xmlString) {	if (thisPath==null || thisPath=="")	{		var myWriteFile = File.openDialog ("Locate "+fileDescription+" File ", "XML file:*.xml", false);	}	else	{		var myWriteFile = new File(thisPath);		if (myWriteFile==null)		{			bt.wr  (fileDescription+"  file object failure: "+File.decode(thisPath));			return (false);		}		myWriteFile.encoding = "UTF-8";		if (myWriteFile.name.toString().toLowerCase().indexOf(".xml")<=0)		{				bt.wr (myWriteFile.name+ " is wrong file type.");				return false;		}		if(myWriteFile.open('w')!=true)		{			bt.wr ("Failed to open for write "+fileDescription+" file");			return (false);		}		if (myWriteFile.write(xmlString)==false)		{			bt.wr ("Failed to write "+fileDescription+" file");			myWriteFile.close();			return (false);		}		myWriteFile.close();		return (true);	}}bt.writeXMLToFile=function (thisPath,fileDescription,xmlData,hdr){	if (hdr==null || hdr==undefined) hdr = "";	if (thisPath==null || thisPath=="")	{		var myWriteFile = File.openDialog ("Locate "+fileDescription+" File ", "XML file:*.xml", false);	}	else	{		var myWriteFile = new File(thisPath);		if (myWriteFile==null)		{			bt.wr  (fileDescription+"  file object failure: "+File.decode(thisPath));			return (false);		}		myWriteFile.encoding = "UTF-8";		if (myWriteFile.name.toString().toLowerCase().indexOf(".xml")<=0)		{				bt.wr (myWriteFile.name+ " is wrong file type.");				return false;		}		if(myWriteFile.open('w')!=true)		{			bt.wr ("Failed to open for write "+fileDescription+" file");			return (false);		}        var locBuf = xmlData.toString();		if (myWriteFile.write(hdr+locBuf)==false)   /// xmlData.toString()		{			bt.wr ("Failed to write "+fileDescription+" file");			myWriteFile.close();			return (false);		}		myWriteFile.close();		return (true);	}}bt.beep = function() {    //app.beep(); }bt.writeHTMLToFile=function (thisPath,fileDescription,htmlData,hdr){	if (hdr==null || hdr==undefined) hdr = "";	if (thisPath==null || thisPath=="")	{		var myWriteFile = File.openDialog ("Save "+fileDescription+" HTML File ", "HTML file:*.html", false);	}	else	{		var myWriteFile = new File(thisPath);		if (myWriteFile==null)		{			bt.wr  (fileDescription+"  file object failure: "+File.decode(thisPath));			return (false);		}		myWriteFile.encoding = "UTF-8";		if (myWriteFile.name.toString().toLowerCase().indexOf(".html")<=0)		{				bt.wr (myWriteFile.name+ " is wrong file type.");				return false;		}		if(myWriteFile.open('w')!=true)		{			bt.wr ("Failed to open for write "+fileDescription+" file");			return (false);		}        var locBuf = htmlData.toString();		if (myWriteFile.write(hdr+htmlData)==false)   /// xmlData.toString()		{			bt.wr ("Failed to write "+fileDescription+" file");			myWriteFile.close();			return (false);		}		myWriteFile.close();		return (true);	}}// n.b - not integrated above yet - no usey////bt.wrLog= function  (str)//{//	bt.wr(str);//	try {//		asInterface.wrLog(str);//	}//	catch(e){//        bt.wr("wrLog error: "+e);//    }//}// //----------------------------------------////   		open html////----------------------------------------bt.openHtml = function (thisPath){	//var thisPath = cfgLib.cfg_getThisScriptFile().parent.absoluteURI +"/"+"CFG_Help.html";	//var thisPath = cfgLibrary.scriptPath+"/"+"CFG_Help.html";	try{		var helpF = new File (thisPath);		helpF.execute();	}   catch(e) {bt.wr("Html launch error: "+e+" "+thisPath);}}// rtns T or Fbt.doLogin=function(userName,passWord) {    bt.wr("Attempting login for " + userName);    var rtn = false;    var loggedIn=false;    var internal = false;    var role = "";    var u = "";    var xmlString ="<users>"+bt.getUserInfo()+"</users>";    try {       var xmlData = new XML(xmlString);    } catch (e) {         bt.wr("bt.doLogin xml error "+e);         return "";    }    if (userName=="Admin" && passWord=="MercyMe.2014") {        loggedIn=true;        role="Adviser";        u="Admin";        internal=true;        bt.wr("bt.doLogin - logged in hard-coded user");    }    if (loggedIn==false) {        var node = xmlData.user.(username ==userName);        if (node==undefined || node =="" || node==null ){            loggedIn= false;             bt.wr("bt.doLogin - failed for "+userName);        } else  if (node.password==passWord) {            loggedIn=true;             bt.wr("bt.doLogin - logged in as "+userName);        }    }    if (loggedIn==true) {         if (internal==false){            u = node.username.toString();            role = node.role.toString();          }        //var loc =   pg.getLabel(app,"BT_USERDATAPATH");        var loc = bt.userdataFolderPath;        var userFile = File(loc+u+".xml");  // make a file in users name        do {            if (userFile==null)            {                bt.wr  ("bt.doLogin: user file object failure: "+File.decode(loc+u+".xml"));                 break;            }            userFile.encoding = "UTF-8";            if(userFile.open('w')!=true) {                bt.wr ("bt.doLogin Failed to open userfile for write "+loc+u+".xml");                 break;            }            userFile.writeln("<when>"+new Date().getTime()+"<when>");            if(userFile.close()==false){                bt.wr ("bt.doLogin Failed to close userfile after write "+userFile.error);            }        } while (false);        bt.wr (u+" logged in as "+role);        bt.loginUserName=u;        bt.loginUserRole=role;        bt.addJournalEntry (bt.loginUserName,"Logged In",bt.getOSUserName(),bt.getMachineName());        if (bt.doLocal==true) {        	    bt.clearLocalFileLists();        		bt.checkForAnyLocallyRemainingFiles ();        }        return role;    }    bt.doAlert ("Invalid user or password");    return "";}bt.doLogout=function(userName) {    bt.wr("bt.doLogout - logged out as "+userName);    //var loc =   pg.getLabel(app,"BT_USERDATAPATH");    var loc = bt.userdataFolderPath;    bt.addJournalEntry (bt.loginUserName,"Logged Out","","");    //pg.setLabel(app,BT_USERNAME,"");    //pg.setLabel(app,BT_USERROLE,"");    var userFile = File(loc+bt.loginUserName+".xml");  // make a file in users name    userFile.remove();    bt.loginUserName="";    bt.loginUserRole="";    bt_locking.logout(userName);    bt_events.logout();    bt_dictionary.doLogout();}bt.getLoggedOnUsersList = function () {    //var loc =   pg.getLabel(app,"BT_USERDATAPATH");    var loc = bt.userdataFolderPath;    var userList=[];    var tmpstr="";    try{        var userDataFolder = Folder(loc );        if (userDataFolder.exists==false) return("");        var users = userDataFolder.getFiles("*.xml");        for (var t=0;t<users.length;t++) {            if (users[t] instanceof File == false ) continue;            if (users[t].name.toString().indexOf('.xml')<=0 ) continue;            userList.push(users[t].name.replace(".xml",""));        }    } catch (e) {        bt.wr("bt.getLoggedOnUsersList "+e);    }        tmpstr=userList.join(BT_ARRAY_DELIMITER);        tmpstr=tmpstr.replace(/\%20/g,"");    return ( tmpstr ); }bt.selectAColor =function(){    return ( $.colorPicker (-1));}bt.getOSUserName = function(){		var os = Folder.fs;		var userEnvVar="USER";  // start with mac setting		var userName = "?";		if (os.indexOf("Windows")>=0)   // but are win in Win		{			userEnvVar = "USERNAME";		}		try{			userName = $.getenv(userEnvVar);		}		catch(e)		{			bt.wr("bt.getUserName: "+e);		}		return userName;}bt.getUserInfo = function () {    //var myXMLData = bt.readFileIntoXML(bt.settingsFolderPath+"BT_UsersList.xml","User Login Data");    var tmpstr = bt.readXMLFileIntoText(bt.settingsFolderPath+"BT_UsersList.xml","User Login Data");    if (tmpstr==null) return ("");    if (tmpstr.charAt(0)=='<' && tmpstr.charAt(1)=='u' && tmpstr.charAt(2)=='s') {;}    else {tmpstr=Base64.decode(tmpstr);}     // strip any empty user entries - ver 3.1.1     tmpstr=tmpstr.replace(/<user\/>/g,'') ;    // remove wrapper for xml list collection    tmpstr=tmpstr.replace("<users>","");    tmpstr=tmpstr.replace("</users>","");    return (tmpstr);}bt.setUserInfo=function (xmlStringInfo) {   var rtn="ok";   // strip any empty user entries - ver 3.1.1   xmlStringInfo=xmlStringInfo.replace(/<user\/>/g,'') ;    try{			var xmlData = new XML(xmlStringInfo);		} catch (e) {				rtn = "setUserInfo: "+e;                  bt.wr(rtn);			return rtn;		}    xmlStringInfo=Base64.encode(xmlStringInfo);    bt.writeTextToXMLFile(bt.settingsFolderPath+"BT_UsersList.xml","User Login Data",xmlStringInfo);     return rtn;}bt.setDefaultBannerImagePath = function (bannerPath,onlySetIfEmpty) {    var xmlStr = bt.getAdminInfo()    if (xmlStr=="") {        // spaces in these values are necessary        xmlStr = "<adminInfo><customerNumber></customerNumber><projectNumber></projectNumber>"+        "<homePageMessage>Welcome to BalfourTools!</homePageMessage><homePageLogo> </homePageLogo>"+        "<scaleImages>true</scaleImages><moveOrCreate>1</moveOrCreate><fuzzynessValue>12</fuzzynessValue>"+        "<submitAsProcess>true</submitAsProcess><autoIndex>true</autoIndex><doLigatures>false</doLigatures>"+        "<balfourURL>https://yearbook-sub.balfour.com/api/v1.0/submission/postfiles</balfourURL>"+        "<balfourAuthenticationURL>https://enfold.balfour.com/authenticate</balfourAuthenticationURL>"+        "<doWarning>true</doWarning>"+        "<indexingCase>false</indexingCase>"+        "<bylineEnabled>false</bylineEnabled>"+        "<bylineOption>BRI</bylineOption>"+        "<bylineParagraphStyle>btbyline</bylineParagraphStyle>"+        "<bylinePrefixStyle>btbylineprefix</bylinePrefixStyle>"+        "<bylineSuffixStyle>btbylinesuffix</bylineSuffixStyle>"+        "<bylineHeight>24</bylineHeight>"+        "<bylineSeparation>1</bylineSeparation>"+        "<bylineLeadingPercent>100</bylineLeadingPercent>"+        "<dictionaryEnabled>false</dictionaryEnabled>"+         "</adminInfo>";    }    bt.homePageLogo=bannerPath;    try {        var xmlData = new XML(xmlStr);     } catch (e) {              bt.wr ("setDefaultBannerImagePath: "+e);			return ("setDefaultBannerImagePath: "+e);    }    if (onlySetIfEmpty==true){         bt.wr("bt.setDefaultBannerImagePath: "+xmlData.homePageLogo.toString()+" "+xmlData.homePageLogo.toString().length);        if (xmlData.homePageLogo.toString().length>1) return;    }    bt.wr("bt.setDefaultBannerImagePath: "+bannerPath);    xmlData.homePageLogo=bannerPath;    xmlStr= xmlData.toString();    return (bt.setAdminInfo(xmlStr));}bt.getAdminInfo=function () {    bt.fuzzynessValue =12;   // set as default    bt.scaleImages =true;      // set as default    bt.autoIndex = true;	    // set as default    var xmlData = bt.readFileIntoXML (bt.settingsFolderPath+"BT_AdminInfo.xml","Admin Info Data");    if (xmlData==null) {           xmlData = bt.setupDefaultAdminInfoAndFile ();           if (xmlData==null) {               return ("");          }	}    bt.customerNumber=xmlData.customerNumber;    bt.projectNumber=xmlData.projectNumber;    bt.homePageMessage=xmlData.homePageMessage;    bt.homePageLogo=xmlData.homePageLogo;    bt.scaleImages = (xmlData.scaleImages.toString() == "true");    bt.submitAsProcess = (xmlData.submitAsProcess.toString() == "true");    bt.fuzzynessValue =xmlData.fuzzynessValue;    if(xmlData.balfourAuthenticationURL == undefined) {        xmlData.balfourAuthenticationURL = "https://enfold.balfour.com/authenticate";    }    if(xmlData.autoIndex == undefined) {    	xmlData.autoIndex = "true";    }    bt.autoIndex = (xmlData.autoIndex.toString() == "true");    // doLigatures added 3.1     if(xmlData.doLigatures == undefined) {         xmlData.doLigatures="false";     }     // doWarning added 3.2.5 - still ok 5.1.6     bt.doLigatures=(xmlData.doLigatures.toString() == "true");     if(xmlData.doWarning == undefined) {         xmlData.doWarning="false";     }     bt.doLocal = (xmlData.doWarning.toString() == "true");		//bt.doLocal = true;  // stub this on     // indexingCase added 3.2.6     if(xmlData.indexingCase == undefined) {         xmlData.indexingCase="false";     }     // dictionary enabled added 5.1.3     if(xmlData.dictionaryEnabled == undefined) {         xmlData.dictionaryEnabled="false";     }     bt.dictionaryEnabled = (xmlData.dictionaryEnabled.toString() == "true");     bt.indexingCase = (xmlData.indexingCase.toString() == "true");     bt.wr("getAdminInfo indexing case is " + bt.indexingCase.toString());     // byline stuff added 3.2.8     bt_byline.setData(xmlData);     // communication stuff     utl.setCommunicationURLs(xmlData);    var tmpstr = xmlData.toString();    return (tmpstr);}bt.setAdminInfo = function (xmlStringInfo) {    var rtn="ok";	bt.wr ("           bt.setAdminInfo  ");    //bt.wr ( xmlStringInfo );    try{			var xmlData = new XML(xmlStringInfo);              if(xmlData.doWarning == undefined) {                   xmlData.doWarning="false";              }              if(xmlData.indexingCase == undefined) {                   xmlData.indexingCase="false";              }              if(xmlData.dictionaryEnabled == undefined) {              	xmlData.dictionaryEnabled = "false";              }			// byline stuff added 3.2.8			bt_byline.setData(xmlData);			// communication stuff		   utl.setCommunicationURLs(xmlData);            bt.customerNumber=xmlData.customerNumber;            bt.projectNumber=xmlData.projectNumber;            bt.homePageMessage=xmlData.homePageMessage;            bt.homePageLogo=xmlData.homePageLogo;            bt.fuzzynessValue =xmlData.fuzzynessValue;            bt.scaleImages = (xmlData.scaleImages.toString() == "true");            bt.autoIndex = (xmlData.autoIndex.toString() == "true");            bt.submitAsProcess = (xmlData.submitAsProcess.toString() == "true");            bt.doLigatures = (xmlData.doLigatures.toString() == "true");            bt.doLocal = (xmlData.doWarning.toString() == "true");            bt.indexingCase = (xmlData.indexingCase.toString() == "true");            bt.dictionaryEnabled = (xmlData.dictionaryEnabled.toString() == "true");            bt.wr("setAdminInfo indexing case is " + bt.indexingCase.toString()); 		} catch (e) {				rtn = "setAdminInfo exception: "+e;                  bt.wr(rtn);			return rtn;		}      bt.writeXMLToFile(bt.settingsFolderPath+"BT_AdminInfo.xml","Admin Info Data",xmlData,"");                                  //pg.setLabel (app,"BT_PROJECTNUMBER",bt.projectNumber);     return rtn;}bt.getAdminInfoFilePath = function () {     return (bt.settingsFolderPath+"BT_AdminInfo.xml");}bt.getProjectNumber = function () {    return bt.projectNumber;}bt.getScaleImages = function() {	return bt.scaleImages;};bt.getAutoIndex = function() {	return bt.autoIndex;};bt.fileMove= function (f1,f2) {    var result=false;    try {        if (File(f1).exists==false) return false;       result = File(f1).copy(f2);       if (result==true){           if (File(f2).exists==true) {               result=File(f1).remove();           }       }    } catch (e) {        bt.wr(" bt.fileMove() "+e);        return false;    }    return result;}bt.togglePanel = function(keyString) {       // take out the underbar used to make it a valid id in caller        var panelKey =keyString.toString().replace("_"," ");                // e.g.  key -> $ID/Color or $ID/Articles or 'Articles'        var panel =  app.panels.itemByName(panelKey);        if (panel.isValid==false) {            bt.wr("invalid panel" + panelKey);            return ("-");        }       // here we get out to avoid - double event symptom       bt.wr("togglePanel pre- "+panel.name+" visible="+panel.visible);        try {            if (panel.visible==false) {                    panel.visible = true;            }else{                    panel.visible =  false;             }        } catch (e) {            bt.wr ("toolbar invalid panel key "+panelKey+" "+e);        }  //bt.wr("togglePanel post "+panel.name+" visible="+panel.visible);    return "ok"; }bt.validGalleryFilename = function(name) {    name = name.toLowerCase();	if (name=='thumbs.db') return false;	if (name.indexOf('.xmp')>0 ) return false;	if (name.indexOf('.xml')>0) return false;	if (name.indexOf('.doc')>0 ) return false;	return true;}bt.stripExtensionFromFileName =function(fileName) {			fileName=fileName.substring(0,fileName.lastIndexOf("."));			return fileName;}bt.createAFileNode =function(title,myImagePath,myThumbPath,noExtension){      return ( btcm.createAFileNode(title,myImagePath,myThumbPath,noExtension) );/*            try {			var newNode= new XML('<itemnode title="" thumbnailImage="" fullImage="" gallery="" path="" user="" date="" size="" dimensions="" rating="" pageuse="" tags="" likes="" location="" caption="" />');		} catch (e) {            bt.wr('createAFileNode '+e);         }            if (noExtension==true){				title=title.substring(0,title.indexOf("."));			}			newNode.@title=title;			newNode.@fullImage=myImagePath;			newNode.@thumbnailImage=myThumbPath; // thumbs kept in another location              newNode.@id=bt.getUniqueId();			//newNode.@path= bt.removeFileProtocolFromPath(newNode.@path);  //newNode.@path=myImagePath.replace('file://',"");            var debugString = newNode.toXMLString();			return (newNode);   */}bt.deleteCMIndex = function(){    new File(bt.savedCMIndexFileFullPath).remove(); // delete old index    bt.galleryIndex="";  // and clear the in memory copy}//// list must be unique - no dup'd names//bt.getListOfPhotographers = function () {    var arr=[];    var tmpstr="";    if (bt.galleryIndex=="") bt.indexAllTheMyContentFiles();    var nameList = bt.galleryIndex.itemnode.(@user != '');    for (var i=0; i<nameList.length(); i++) {        if (arr.find(nameList[i].@user.toString())==false) arr.push(nameList[i].@user.toString());    }    arr.sort();    var rtnData = "";    for (var k=0;k<arr.length; k++) {        tmpstr = arr[k] .replace(/\s{2,}/g,' ');        if (tmpstr==" ") continue; // it was all spaces        if (arr[k]=="" || arr[k]==" ") continue; // it was empty or a single space        rtnData+="<item ><itemname>"+arr[k]+"</itemname></item>";    }    return rtnData;  // }// replace multiple spaces with single space =>   .replace(/\s{2,}/g,' ');bt.getListOfShotDates = function () {    var arr=[];    var tmpstr="";    if (bt.galleryIndex=="") bt.indexAllTheMyContentFiles();    var dateList = bt.galleryIndex.itemnode.(@date != '');    for (var i=0; i<dateList.length(); i++) {        tmpstr = dateList[i].@date.toString();        tmpstr = tmpstr.substring(0,tmpstr.indexOf(' '));  // extract just the date part of the date string        if (arr.find(tmpstr)==false) arr.push(tmpstr);    // and use it - e.g., 2013/3/16    }    var rtnData = "";    arr.sort();    for (var k=0;k<arr.length; k++) {        if (arr[k]=="" || arr[k]==" ") continue;        rtnData+="<item ><itemname>"+arr[k]+"</itemname></item>";    }    return rtnData;  //}bt.runContentFilter = function (category, searchKey,qualifier) {    var resultList="";     searchKey=searchKey.toLowerCase();     if (qualifier==undefined || qualifier==null || qualifier=="undefined" || qualifier=="" ) qualifier='equals';    var arr=[];    var tmpstr="";    if (bt.galleryIndex=="") bt.indexAllTheMyContentFiles();    bt.wr("runContentFilter "+category+" "+searchKey+" "+qualifier);    if (category=='user') {        resultList = bt.galleryIndex.itemnode.(@user.toString().toLowerCase()==searchKey) ;    }   if  (category=='date') {         resultList = bt.galleryIndex.itemnode.(@date.toString().indexOf(searchKey)>=0) ;    }   // filename    if  (category=='title') {        if (qualifier=='beginsWith')            resultList = bt.galleryIndex.itemnode.(@title.toString().toLowerCase().indexOf(searchKey)==0) ;        if (qualifier=='contains')            resultList = bt.galleryIndex.itemnode.(@title.toString().toLowerCase().indexOf(searchKey)>=0) ;        if (qualifier=='equals')            resultList = bt.galleryIndex.itemnode.(@title.toString().toLowerCase()==searchKey) ;     }    return ("<gallery>"+resultList.toXMLString()+"</gallery>");}bt.updateThisFilesIndexData = function (fPath) {    bt.wr("bt.updateThisFilesIndexData "+bt.savedCMIndexFileFullPath); 	if (File(bt.savedCMIndexFileFullPath).exists==true) {               var galleryXmlData = bt.readFileIntoXML (bt.savedCMIndexFileFullPath, 'CM index');                   	    bt.wr("bt.updateThisFilesIndexData 1");    } else {                   	    bt.wr("bt.updateThisFilesIndexData 2");       return "0"; // skip out if no index yet    }	var fileObj = File(fPath);	var aNode = galleryXmlData.itemnode.(@path==fPath) ;    if (aNode.length() != 1) return 0;    aNode = bt_xmp.addMetadataToNodeInternal(fileObj.fsName, aNode);    bt.writeXMLToFile(bt.savedCMIndexFileFullPath,'CM index',galleryXmlData,null);	//bt.wr(" bt.updateThisFilesIndexData ");	//bt.wr(galleryXmlData.toXMLString());	//bt.wr(" ");    return (1);}bt.indexAllTheMyContentFiles = function () {   // var fldr = Folder.selectDialog ("pick top level folder of things to index ");    bt.wr("bt.indexAllTheMyContentFiles() ");   var galleryXmlData =<gallery />;   var fldr = Folder(bt.getMyContentFolderPath());   if (fldr==null || fldr == false ) return (galleryXmlData.toXMLString());     var start = new Date().getTime();							 //var savedGalleryIndex = pg.getLabel(app,"BT_GALLERYINDEXDATA");							// if (savedGalleryIndex!="" && savedGalleryIndex!= -1 ) {							 //   try {							  //      galleryXmlData= new XML(savedGalleryIndex);							 //   }catch(e){							 //       bt.wr ('bt.indexAllTheMyContentFiles make xml error '+e);							 //       return (galleryXmlData.toXMLString());							  //   }     if (File(bt.savedCMIndexFileFullPath).exists==true) {               galleryXmlData = bt.readFileIntoXML (bt.savedCMIndexFileFullPath, 'CM index');      } else {        var arr=[];        arr = newTraversal(fldr,arr);  // get an array of folders   var end = new Date().getTime();   bt.wr((end-start)/1000 + " secs to gather folders ");        //pg.newProgress  (arr.length, "Indexing Content");        for (var i=0; i<arr.length;i++) {            //pg.incProgress();            galleryXmlData=bt.scanAllTheFolderFiles(arr[i].fsName,galleryXmlData);        }       bt.writeXMLToFile(bt.savedCMIndexFileFullPath,'CM index',galleryXmlData,null);        //pg.setLabel(app,"BT_GALLERYINDEXDATA",galleryXmlData.toXMLString());        //pg.closeProgress();   }   bt.galleryIndex=galleryXmlData; // XML of saved index info   var end2 = new Date().getTime();   bt.wr((end2-start)/1000 + " secs to index content ");    return (galleryXmlData.toXMLString());    // to search for all the 'sarah' items    // var turk = galleryXmlData.itemnode.(@user=='Sarah') ;  // rtnd 15 items}bt.scanAllTheFolderFiles=function (folderPath,galleryXmlData) {    var fileObj = null;    var tmpstr="";    var tmpArr = [];    var aNode=null;    try {        var fldr = Folder (folderPath);        if (fldr.alias==true) return;    } catch (e) {        bt.wr ("scanAllTheFolderFiles error "+folderPath+" "+e);    }    var files=fldr.getFiles();    for (var fileNum=0; fileNum<files.length; fileNum++) {        if (files[fileNum].name=='Thumbs.db' ||  files[fileNum].name=='.DS_Store') continue;        if (files[fileNum].name.substring(0, 1) == ".") continue;        if (files[fileNum].alias==true) continue;        if (files[fileNum].constructor.name=="File") {            tmpArr=[];            fileObj = files[fileNum];            tmpstr = bt.stripExtensionFromFileName( files[fileNum].name);		   tmpstr="_thmb_"+File.decode(tmpstr)+".jpg";		   thumbLoc=bt.getPathFromFullPath(files[fileNum].fsName)+"thumbnails";            thumbLoc=bt.ensurePathEndsInSlash (thumbLoc)+tmpstr;            aNode = bt.createAFileNode(files[fileNum].name,files[fileNum].fsName, thumbLoc,false);  bt.wr("bt.scanAllTheFolderFiles rtns is xml "+   aNode instanceof XML);            aNode.@gallery = "";            aNode = bt_xmp.addMetadataToNodeInternal(fileObj.fsName, aNode);            galleryXmlData.appendChild(aNode);        }    }    return galleryXmlData;}bt.getMachineName = function() {	if (bt.prefData.machineName == undefined) {         bt.wr("bt.prefData.machineName == undefined");		return ""	}	else {		return bt.prefData.machineName;	}};bt.setMachineName = function(name) {	bt.prefData.machineName = name;	bt.writeXMLToFile (bt.prefFilePath,"Preferences",bt.prefData,null);};bt.afterQuit = function() {    if(bt.loginUserName !== "") {        bt.doLogout(bt.loginUserName);    }};//// only save path if some pages open//bt.saveDraggedFilePath = function (filepath) {    var rtn =false;    if (app.documents.length>0) {          bt.savedDrop = filepath;          bt.wr("bt.saveDraggedFilePath: "+bt.savedDrop);          rtn = true;     }     return rtn; };bt.getDraggedFilePath = function () {	var ret = "";	if (bt.savedDrop != undefined && bt.savedDrop != "") {	   bt.wr ("bt.getDragFilePath: "+bt.savedDrop);	   ret = bt.savedDrop;	}	return ret;};bt.changeAllSpotColorsToProcessColors = function(myDoc) {    myDoc.colors.everyItem().properties = {space:ColorSpace.CMYK, model:ColorModel.PROCESS};}// the external rotateAnImage functionfunction rotateAnImage (fullSizePath,thumbnailPath, direction,longEdge) {     bt.wr("rotateAnImage "+fullSizePath+" "+thumbnailPath+" "+direction+" "+longEdge);     if (fullSizePath.toLowerCase().indexOf(".jpg") <0 && fullSizePath.toLowerCase().indexOf(".jpeg") <0) {           bt.wr("rotateAnImage - skipping - not a jpeg");           return;     }      var savedMetaData = bt_xmp.readXMP(fullSizePath) ;      //var myXmpData = bt_xmp.getFileMetadata(fullSizePath);      //bt.wr("xmpData " + myXmpData);      //var bridgeCompleteObject = {"path":fullSizePath, "thumbnailPath":thumbnailPath, "operation":"rotate", "xmp":myXmpData};      var bridgeCompleteObject = {"path":fullSizePath, "thumbnailPath":thumbnailPath, "operation":"rotate", "xmp":savedMetaData};      bt.waitingForBridge.push(bridgeCompleteObject);     var myScript = "var ftn = " + bridgeRemoteRotateImage.toSource() + "; ftn(" + fullSizePath.toSource() + ","+ thumbnailPath.toSource() + "," + direction.toSource() + "," + longEdge.toSource() + " );" ;     setBridge(myScript);                                //bt_xmp.putFileMetadata (fullSizePath,savedMetaData); // restore saved metadata to new image file}// to update afterOpen to bt3.version ="0.11"bt.updateStartupScriptsFromEmbedded = function (scriptName,scriptBuffer) {    bt.scriptName=scriptName;    bt.scriptBuffer=scriptBuffer;                   // do a check for an existing site update - embedded startup script                   // dont re-deliver if we are doing it from resources     if (bt.restartWarn==false) {        if (bt.deliverEmbeddedScript ()) {            bt.doAlert ("Restart InDesign to complete a BalfourTools update.");            bt.logfile_close();            bt.quitInDesign();         }     }}bt.deliverEmbeddedScript = function () {        var startupScriptsPath = bt.getStartupScriptsFolderPath();        var rtn = false;        var afterOpenFile = new File(startupScriptsPath+bt.scriptName);        if (afterOpenFile instanceof File && afterOpenFile.exists == true ) {            // afterOpenFile.modified              var ts = new Date(2014,7,7).getTime();   // our version compare time                  bt.wr ("  check embedded "+afterOpenFile.modified.getTime()+" "+ts);               if (afterOpenFile.modified.getTime() < ts ){                   bt.wr ("  deliver embedded "+afterOpenFile.modified.getTime() +" "+ts);                   afterOpenFile.encoding ="UTF-8";                    if(afterOpenFile.open('w') != true) {                        bt.wr ("Failed to open for write "+afterOpenFile.name+" file");                    }                    if (afterOpenFile.write(bt.scriptBuffer)==false)                    {                        bt.wr ("Failed to write file"+afterOpenFile.name+" file");                    } else {                        rtn=true;                    }                    afterOpenFile.close();               }        } else {            bt.wr ("  deliver embedded open file error "+afterOpenFile+" "+afterOpenFile.error);        }     return rtn;}//// ExtManager drops a file in the InDesign folder// if newer than the file in Resources or missing from resources - we deliver file// then remove InDesign folder copy//  returns T if delivered something successfullybt.deliverOrUpdateResourceFile = function (resourceFileName) {     var srcFile = null;     var resFile = null;     var rtn=false;   // bt.wr    (' deliverResourceFile () '+resourceFileName);    try {         resFile = new File(bt.projectResourcesPath+resourceFileName);         srcFile = new File(bt.getInDesignFolderPath()+resourceFileName);         if (srcFile.exists == true) {  // if there is someting to try and deliver             if (resFile.exists ==true) {                   if (resFile.modified<srcFile.modified) {  // is it newer than  dest file                        if (bt.copyFileBinary(srcFile.fsName, resFile.fsName)) {   // copy                          bt.wr ("Delivered resource file "+srcFile.name);                           rtn=true;                        } else {                         bt.wr ("Delivered resource binary file copy failed "+srcFile.name);                        }                    }             } else {  // or if dest file not in resources folder                    if (bt.copyFileBinary(srcFile.fsName, resFile.fsName)) {    // copy                          bt.wr ("Delivered resource file "+srcFile.name);                          rtn=true;                     } else {                         bt.wr ("Delivered resource binary file copy failed "+srcFile.name);                    }             }           //srcFile.remove();  // clean up from dropped by EM        }     } catch (e) {          bt.wr("deliverResourceFile exception: "+srcFile.name+" "+e);     }     return rtn; }bt.setInDesignColorSpace=function () {                    //app.colorSettings.cmsSettingsPath= new File("~/Desktop/Balfour_Standard.csf");    var csFile = null;    try {            csFile = new File(bt.projectResourcesPath+BT_COLORSPACE_FILENAME);        if (csFile.exists==true) {            app.colorSettings.cmsSettingsPath = csFile;        } else {            bt.wr("bt.setColorSpace error - file missing: "+bt.projectResourcesPath+csFile.name);        }    } catch (e) {             bt.wr("bt.setColorSpace exception: "+e);    }}bt.setupDefaultAdminInfoAndFile =  function () {         var xmlDataset=null;           bt.wr ("bt.getDefaultAdminInfo () -  No BT_AdminInfo.xml created yet. Setting defaults");        // spaces in these values are necessary        var xmlStr = "<adminInfo>"+        "<customerNumber></customerNumber>"+        "<projectNumber></projectNumber>"+        "<homePageMessage>Welcome to BalfourTools!</homePageMessage>"+        "<homePageLogo> </homePageLogo>"+        "<scaleImages>true</scaleImages>"+        "<moveOrCreate>1</moveOrCreate>"+        "<fuzzynessValue>12</fuzzynessValue>"+        "<submitAsProcess>true</submitAsProcess>"+        "<autoIndex>true</autoIndex>"+        "<doLigatures>false</doLigatures>"+        "<balfourURL>https://yearbook-sub.balfour.com/api/v1.0/submission/postfiles</balfourURL>"+        "<balfourAuthenticationURL>https://enfold.balfour.com/authenticate</balfourAuthenticationURL>"+        "<doWarning>true</doWarning>"+        "<indexingCase>false</indexingCase>"+        "<bylineEnabled>false</bylineEnabled>"+        "<bylineOption>BRI</bylineOption>"+        "<bylineParagraphStyle>btbyline</bylineParagraphStyle>"+        "<bylinePrefixStyle>btbylineprefix</bylinePrefixStyle>"+        "<bylineSuffixStyle>btbylinesuffix</bylineSuffixStyle>"+        "<bylineHeight>24</bylineHeight>"+        "<bylineSeparation>1</bylineSeparation>"+        "<bylineLeadingPercent>100</bylineLeadingPercent>"+        "<uploadCoverageURL>http://lime.balfour.com/api/v1.0/image_page</uploadCoverageURL>"+        /*"<downloadTemplatesURL>downloadTemplates</downloadTemplatesURL>"+        "<downloadClipArtURL>downloadClipArt</downloadClipArtURL>"+        "<downloadBackgroundsURL>downloadBackgrounds</downloadBackgroundsURL>"+        "<downloadLibrariesURL>downloadLibraries</downloadLibrariesURL>"+        "<downloadImagesURL>downloadImages</downloadImagesURL>"+*/        "<uploadAddNewStudents>false</uploadAddNewStudents>"+        "<dictionaryEnabled>false</dictionaryEnabled>" +         "</adminInfo>";        try {        	xmlDataset =  new XML(xmlStr);        } catch (e) {            bt.wr ("bt.getAdminInfo failed to create XML defaults "+e);            return(xmlDataset);        }        bt.setAdminInfo(xmlStr);        return xmlDataset;}function forwardSlasher(tmpstr) {	 var regex = /\\/g;	 tmpstr =tmpstr.replace(regex,'/');	 return tmpstr;}bt.tellUI = function (type,data) {        try {            var xLib = new ExternalObject("lib:\PlugPlugExternalObject");        } catch (e) {            bt.wr (" bt.tellUI "+e);        }        if (xLib) {            var eventObj = new CSXSEvent();            eventObj.type = type;            eventObj.data = data;            eventObj.dispatch();            bt.wr ("bt.tellUI sends "+type+" "+data);        }}/*var testXmlSpec = "<page>"+  "<displayName>30 Frames Captions Below</displayName>"+  "<manualEdit>0</manualEdit>"+  "<framesPerPage>30</framesPerPage>"+  "<captionPosition>0</captionPosition>"+  "<horizontalFrameCount>6</horizontalFrameCount>"+  "<verticalFrameCount>5</verticalFrameCount> "+  "<portraitSizeAuto>0</portraitSizeAuto>"+  "<portraitSizeHeight>8p2</portraitSizeHeight>"+  "<portraitSizeWidth>6p4</portraitSizeWidth>"+  "<portraitSeparationAuto>0</portraitSeparationAuto>"+  "<horPortraitSeparation>12</horPortraitSeparation>"+  "<verPortraitSeparation>24</verPortraitSeparation>"+  "<textSeparationHorizontal>12</textSeparationHorizontal>"+  "<textSeparationVertical>6</textSeparationVertical>"+  "<captionWidth/>"+  "<captionHeight>1p3</captionHeight>"+  "<groupName>Grade STAFF</groupName>"+  "<firstPage>20</firstPage>"+  "<ID>10</ID>"+  "<lastPage>21</lastPage>"+  "<justify>both</justify>"+  "<source>system</source>"+"</page>";*//*var testXmlSpecAside = "<page>"+  "<displayName>24 Frames Caption Aside</displayName>"+  "<manualEdit>1</manualEdit>"+  "<framesPerPage>24</framesPerPage>"+  "<captionPosition>1</captionPosition>"+   "<horizontalFrameCount>4</horizontalFrameCount>"+   "<verticalFrameCount>6</verticalFrameCount>"+   "<portraitSizeAuto>0</portraitSizeAuto>"+   "<portraitSizeHeight>8p2</portraitSizeHeight>"+   "<portraitSizeWidth>6p4</portraitSizeWidth>"+   "<portraitSeparationAuto>0</portraitSeparationAuto>"+   "<horPortraitSeparation>12</horPortraitSeparation>"+   "<verPortraitSeparation>24</verPortraitSeparation>"+   "<textSeparationHorizontal>12</textSeparationHorizontal>"+   "<textSeparationVertical>0</textSeparationVertical>"+   "<captionWidth>12p0</captionWidth>"+   "<captionHeight/>"+   "<groupName>Grade STAFF</groupName>"+   "<firstPage>12</firstPage>"+  "<justify>off</justify>"+  "<source>system</source><ID>10</ID>"+   "<lastPage>13</lastPage>"+ "</page>";*//*bt.initLibrary();portrait_files.setPaths(bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"Portraits"));activity_log.initializeActivityLog();bt.doLogin('admin','');var res = btcm.getListOfPhotographers();$.writeln(res);*///pg.createFrames(testXmlSpec);//pg.flowPortraits ('Grade STAFF',10,12,13,'LastFirst','');//pg.createFrames(testXmlSpec);//pg.flowPortraits (groupName:String,Id:int,firstFlowPage:int,lastFlowPage:int,sortKey:String)//bt.checkAllBookPages("30~31");//bt.moveBookPages  (30,31,false,26);//bt.moveBookPages() to move spreads 30 - 30 to spread 26.  Pages 26 to 28 will be affected//pg.flowPortraits('Grade 000',6,2,4,'LastFirst','');//bt.anyPageItemsOverBlacked(app.activeDocument);//var ff= bt.getPagesFilePath(4);//bt.newMoveBookPages  (10,11,false,14);//pg.tagSelection();//pg.flowPortraits  ('Grade 002',8,6,9,'LastFirst','');//pg.tagFramesBySample( 10,'Grade 004',10,11);ay//pg.newFlowPortraits8 Grade 002 6 9 LastFirst//pg.flowPortraits  ("TestGroup",16,66,67,"LastFirst","LastFirst");//pg.setSelectionNotPortraitNotCaptionValues (true) ;//bt.getCustomTemplateWidthAndHeight();//bt._createNewDocFromTemplate ('~/Desktop/My%20New%20Trim%20Project/Pages/002-003/333331_002_003.indd','/Users/peterjbaumgartner/Desktop/My New Trim Project/Templates/custom.indt',2,true);//,//bt.runVerify();//bt.checkAllBookPages()//pg.makeCustomFrameSpecsForThisTrimSize();//pg.loadCustomFrameSpecDefaults();//pg.getFrameLayouts();/*var testXmlSpec = "<page>"+  "<displayName>test</displayName>"+  "<manualEdit>0</manualEdit>"+  "<framesPerPage>24</framesPerPage>"+  "<captionPosition>1</captionPosition>"+  "<horizontalFrameCount>6</horizontalFrameCount>"+  "<verticalFrameCount>4</verticalFrameCount> "+  "<portraitSizeAuto>0</portraitSizeAuto>"+  "<portraitSizeHeight>8p2</portraitSizeHeight>"+  "<portraitSizeWidth>6p4</portraitSizeWidth>"+  "<portraitSeparationAuto>0</portraitSeparationAuto>"+  "<horPortraitSeparation>12</horPortraitSeparation>"+  "<verPortraitSeparation>24</verPortraitSeparation>"+  "<textSeparationHorizontal>12</textSeparationHorizontal>"+  "<textSeparationVertical>0</textSeparationVertical>"+  "<captionWidth>12p0</captionWidth>"+  "<captionHeight></captionHeight>"+  "<firstPage>10</firstPage>"+  "<lastPage>11</lastPage><ID>6</ID><groupName>Grade 000</groupName><justify>both</justify><source>system</source>"+"</page>";*///pg.createFrames(testXmlSpec); // 3 6//bt.buildANewBook ("My Yearbook Name",1,1,12,""); //("/Users/peterjbaumgartner/Desktop/My New Trim Project/Pages/thumbnails/333331_002_003_0.jpg");//bt.makeCustomTrimBlankPageThumbnail();//pg.makeCustomFrameSpecsForThisTrimSize();/*bt.initLibrary();portrait_files.setPaths(bt.addAnotherFolderToPath(bt.getProjectFolderPath(),"Portraits"));activity_log.initializeActivityLog();bt.doLogin('Admin','MercyMe.2014');bt.deleteAnyInDesignLockFiles();*///pg.unTagSelection();//pg.tagSelection();//bt.doToolBar("Book_Preview");//pg.flowPortraits  ("TestGroup",16,66,67,"LastFirst","LastFirst");//bt.exportAPageListToPDFs("2-3,12,41-44");//bt.exportPDFfromOpenDocument  (app.activeDocument,true)//var theResult = bt.exportARangeToPDFs("2~8");//$.writeln(theResult);//pg.newFlowPortraits16 TestGroup 66 67 LastFirst//pg.createFrames: 58 59/*var testXmlSpecAside = "<page>"+  "<displayName>24 Frames Caption Aside</displayName>"+  "<manualEdit>1</manualEdit>"+  "<framesPerPage>24</framesPerPage>"+  "<captionPosition>1</captionPosition>"+   "<horizontalFrameCount>4</horizontalFrameCount>"+   "<verticalFrameCount>6</verticalFrameCount>"+   "<portraitSizeAuto>0</portraitSizeAuto>"+   "<portraitSizeHeight>8p2</portraitSizeHeight>"+   "<portraitSizeWidth>6p4</portraitSizeWidth>"+   "<portraitSeparationAuto>0</portraitSeparationAuto>"+   "<horPortraitSeparation>12</horPortraitSeparation>"+   "<verPortraitSeparation>24</verPortraitSeparation>"+   "<textSeparationHorizontal>12</textSeparationHorizontal>"+   "<textSeparationVertical>0</textSeparationVertical>"+   "<captionWidth>12p0</captionWidth>"+   "<captionHeight/>"+   "<groupName>Grade STAFF</groupName>"+   "<firstPage>12</firstPage>"+  "<justify>horizontal</justify>"+  "<source>system</source><ID>10</ID>"+   "<lastPage>13</lastPage>"+ "</page>";*/// other unit tests moved to unitTest.jsx//// pg.newFlowPortraits21 LessThan25 26 27 LastFirst LastFirst//pg.tagSelection();//$.writeln('done');//pg.flowPortraits("LessThan25",21,26,27,"LastFirst","LastFirst") ;//pg.unTagSelection();//pg.flowPortraits("LessThan25",21,27,27,"LastFirst","LastFirst") ; // 21 LessThan25 27 27 LastFirst LastFirst//var st = bt.readNumberedPageList();//$.writeln('done');//var st = bt.listAllFlowInfo();//$.writeln('moo');//pg.flowPortraits  ("Grade Scool Of Nursing",11,40,54,"LastFirst","LastFirst");//var st = bt.listAllFlowInfo();//$.writeln(st);//var ro = bt.getQuickCountOfPhotosByGroupId(17, false,"","");//$.writeln(ro);//pg.undoFlow (19,'Underclass', 'tagged');//$.writeln(pm.getFlowableGroupList())//pg.newFlowPortraits11 Grade School of Nursing undefined undefined LastFirst LastFirst//bt.buildANewBook My Yearbook Name Size:7 Pages:1-64//bt.buildANewBook ("My Yearbook Name",7,1,64,"");//pg.tagSelection();//pg.setCoordSchemeToSpread(app.activeDocument)//pg.setCoordSchemeToPage(app.activeDocument,1)//pg.unTagSelection();//pg.tagFramesBySample  (10,'Grade School of Music and the Arts',52,57) ;//bt.initLibrary();//$.writeln('ok');/*portrait_files.setPaths("~/Desktop/2015_Project_Size_8/Portraits");activity_log.initializeActivityLog();bt.doLogin('Peter','peter');//bt.savePageListInfoToCsv();//var b = bt._docVerify(app.activeDocument,7);var b = bt.runVerify();$.writeln(b);*/